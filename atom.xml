<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ned Lee&#39;s bolg</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-12T07:19:59.262Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ned Lee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>堆与栈的概念和区别</title>
    <link href="http://yoursite.com/2020/05/12/%E5%A0%86%E4%B8%8E%E6%A0%88%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2020/05/12/%E5%A0%86%E4%B8%8E%E6%A0%88%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E5%8C%BA%E5%88%AB/</id>
    <published>2020-05-12T07:08:42.000Z</published>
    <updated>2020-05-12T07:19:59.262Z</updated>
    
    <content type="html"><![CDATA[<p>​        Java程序在运行时都要开辟空间，任何软件在运行时都要在内存中开辟空间，Java虚拟机运行时也是要开辟空间的。JVM运行时在内存中开辟一片内存区域，启动时在自己的内存区域中进行更细致的划分，因为虚拟机中每一片内存处理的方式都不同，所以要单独进行管理。</p><p>   JVM内存的划分有五片：</p><p>​    1.  寄存器；</p><p>​    2.  本地方法区；</p><p>​    3.  方法区；</p><p>​    4.  栈内存；</p><p>​    5.  堆内存</p><img src="/2020/05/12/%E5%A0%86%E4%B8%8E%E6%A0%88%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E5%8C%BA%E5%88%AB/heapandstack.png" class title="堆与栈"><p> 我们重点来说一下堆和栈：</p><p>​        栈内存:栈内存首先是一片内存区域，存储的都是局部变量，凡是定义在方法中的都是局部变量（方法外的是全局变量），for循环内部定义的也是局部变量，是先加载函数才能进行局部变量的定义，所以方法先进栈，然后再定义变量，变量有自己的作用域，一旦离开作用域，变量就会被释放。栈内存的更新速度很快，因为局部变量的生命周期都很短。</p><pre><code>堆内存:存储的是数组和对象（其实数组就是对象），凡是new建立的都是在堆中，堆中存放的都是实体（对象），实体用于封装数据，而且是封装多个（实体的多个属性），如果一个数据消失，这个实体也没有消失，还可以用，所以堆是不会随时释放的，但是栈不一样，栈里存放的都是单个变量，变量被释放了，那就没有了。堆里的实体虽然不会被释放，但是会被当成垃圾，Java有垃圾回收机制不定时的收取。</code></pre><p>JAVA的JVM的内存可分为3个区：堆(heap)、栈(stack)和方法区(method)</p><p><strong>·    栈区:</strong></p><ol><li><p>每个线程包含一个栈区，栈中只保存方法中（不包括对象的成员变量）的基础数据类型和自定义对象的引用(不是对象)，对象都存放在堆区中</p></li><li><p>每个栈中的数据(原始类型和对象引用)都是私有的，其他栈不能访问。</p></li><li><p>栈分为3个部分：基本类型变量区、执行环境上下文、操作指令区(存放操作指令)。</p></li></ol><p><strong>·    堆区:</strong></p><ol><li><p>存储的全部是对象实例，每个对象都包含一个与之对应的class的信息(class信息存放在方法区)。</p></li><li><p>jvm只有一个堆区(heap)被所有线程共享，堆中不存放基本类型和对象引用，只存放对象本身，几乎所有的对象实例和数组都在堆中分配。</p></li></ol><p><strong>·    方法区:</strong></p><ol><li><p>又叫静态区，跟堆一样，被所有的线程共享。它用于存储已经被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p><img src="/2020/05/12/%E5%A0%86%E4%B8%8E%E6%A0%88%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E5%8C%BA%E5%88%AB/p2.png" class title="java内存区域"></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​        Java程序在运行时都要开辟空间，任何软件在运行时都要在内存中开辟空间，Java虚拟机运行时也是要开辟空间的。JVM运行时在内存中开辟一片内存区域，启动时在自己的内存区域中进行更细致的划分，因为虚拟机中每一片内存处理的方式都不同，所以要单独进行管理。&lt;/p
      
    
    </summary>
    
    
      <category term="牛客小知识" scheme="http://yoursite.com/categories/%E7%89%9B%E5%AE%A2%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>数据库连接池的作用</title>
    <link href="http://yoursite.com/2020/05/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>http://yoursite.com/2020/05/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E7%9A%84%E4%BD%9C%E7%94%A8/</id>
    <published>2020-05-12T07:01:06.000Z</published>
    <updated>2020-05-12T07:07:52.960Z</updated>
    
    <content type="html"><![CDATA[<h4 id="数据库连接池的作用"><a href="#数据库连接池的作用" class="headerlink" title="数据库连接池的作用"></a>数据库连接池的作用</h4><p>​        对于一个简单的数据库引用，用于对数据库的访问不是很频繁。这时就可以简单的在需要访问数据库是，就创建一个连接，用完后就关闭它，这样做也不会带来什么明显的性能上的开销。但是对于一个复杂的数据库引用，情况就完全不同了。频繁的建立、关闭连接，会极大的减低系统的性能，因为对于连接的使用成了系统性能的瓶颈。</p><p>　　对于共享资源，有一个很著名的设计模式：资源池。该模式正是为了解决资源频繁分配、释放所造成的问题的。把该模式应用到数据库连接管理领域，就是建立一个数据库连接池，提供一套高效的连接分配、使用策略，最终目标是实现连接的高效、安全的复用。 </p><p>　　数据库连接池的基本原理是在内部对象池中维护一定数量的数据库连接，并对外暴露数据库连接获取和返回方法。如：外部使用者可通过getConnection 方法获取连接，使用完毕后再通过releaseConnection 方法将连接返回，注意此时连接并没有关闭，而是由连接池管理器回收，并为下一次使用做好准备。</p><p>数据库连接池技术带来的优势：</p><p><strong>1.限定了数据库连接的个数，不会由于数据库连接过多，导致系统运行缓慢或者崩溃</strong></p><p><strong>2.不需要每次去创建或销毁，节约资源</strong></p><p><strong>3.不需要每次都去创建，相应时间更快</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;数据库连接池的作用&quot;&gt;&lt;a href=&quot;#数据库连接池的作用&quot; class=&quot;headerlink&quot; title=&quot;数据库连接池的作用&quot;&gt;&lt;/a&gt;数据库连接池的作用&lt;/h4&gt;&lt;p&gt;​        对于一个简单的数据库引用，用于对数据库的访问不是很频繁。这时就可以
      
    
    </summary>
    
    
      <category term="牛客小知识" scheme="http://yoursite.com/categories/%E7%89%9B%E5%AE%A2%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>创建多线程的4种方式</title>
    <link href="http://yoursite.com/2020/05/11/%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%844%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/05/11/%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%844%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2020-05-11T12:38:14.000Z</published>
    <updated>2020-05-11T14:13:30.550Z</updated>
    
    <content type="html"><![CDATA[<h4 id="java中创建多线程的4种方式"><a href="#java中创建多线程的4种方式" class="headerlink" title="java中创建多线程的4种方式"></a>java中创建多线程的4种方式</h4><h5 id="1-线程是什么？"><a href="#1-线程是什么？" class="headerlink" title="1.线程是什么？"></a>1.线程是什么？</h5><p>​    线程被称为轻量级进程，是程序执行的最小单位，它是指在程序执行过程中，能够执行代码的一个执行单位。每个程序都至少有一个线程，也即是程序本身。</p><h5 id="2-线程状态"><a href="#2-线程状态" class="headerlink" title="2.线程状态"></a>2.线程状态</h5><p>​    Java语言定义了5种线程状态，在任意一个时间点，一个线程只能有且只有其中一个状态。，这5种状态如下：</p><p>（1）新建（New）：创建后尚未启动的线程处于这种状态</p><p>（2）运行（Runable）：Runable包括了操作系统线程状态的Running和Ready，也就是处于此状态的线程有可能正在执行，也有可能正在等待着CPU为它分配执行时间。</p><p>（3）等待（Wating）：处于这种状态的线程不会被分配CPU执行时间。等待状态又分为无限期等待和有限期等待，处于无限期等待的线程需要被其他线程显示地唤醒，没有设置Timeout参数的Object.wait()、没有设置Timeout参数的Thread.join()方法都会使线程进入无限期等待状态；有限期等待状态无须等待被其他线程显示地唤醒，在一定时间之后它们会由系统自动唤醒，Thread.sleep()、设置了Timeout参数的Object.wait()、设置了Timeout参数的Thread.join()方法都会使线程进入有限期等待状态。</p><p>（4）阻塞（Blocked）：线程被阻塞了，“阻塞状态”与”等待状态“的区别是：”阻塞状态“在等待着获取到一个排他锁，这个时间将在另外一个线程放弃这个锁的时候发生；而”等待状态“则是在等待一段时间或者唤醒动作的发生。在程序等待进入同步区域的时候，线程将进入这种状态。</p><p>（5）结束（Terminated）：已终止线程的线程状态，线程已经结束执行。</p><h5 id="3-java创建多线程的四种方式"><a href="#3-java创建多线程的四种方式" class="headerlink" title="3.java创建多线程的四种方式"></a>3.java创建多线程的四种方式</h5><p>（1）   继承Thread类创建线程</p><p>（2）   实现Runnable接口创建线程</p><p>（3）   使用Callable和FutureTask创建线程</p><p>（4）   使用线程池，例如用Executor框架创建线程</p><p><strong>1)继承Thread类创建线程步骤如下：</strong></p><p>定义一个继承Thread线程类的类，在类中重写run方法。</p><p>在main函数中实例化这个类，初始化实现继承Thread类的对象。</p><p>用这个类的实例调用start方法，执行覆写的run方法。这里是父类即Thread接收创建的对象，由于自身没有start方法，所以是调用父类Thread的start方法创建线程。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;<span class="comment">//继承Thread类</span></span><br><span class="line"></span><br><span class="line">　　<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">　　<span class="comment">//重写run方法</span></span><br><span class="line"></span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">　　<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">new</span> MyThread().start();<span class="comment">//创建并启动线程</span></span><br><span class="line"></span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2)实现Runnable接口创建线程步骤如下：</strong></p><p>定义一个实现Runnable接口的类A，在类中重写run方法。</p><p>在main函数中实例化这个类，但是注意，这不是线程类或者其子类，无法使用start方法，所以无法像1)方法一样用父类接收其对象直接调用start方法执行run方法。</p><p>实例化线程类，将上一步实例化的Runnable接口的类作为参数传给Thread线程类，初始化线程对象，即 Thread t = new Thread(new A());</p><p>线程类实例调用start方法执行run方法体。</p><p>为什么不直接调用run方法，而是必须先调用start方法呢？</p><p>因为start方法会启动线程，此时该线程处于就绪状态，start方法体中有一个start0的native方法，在这个方法里创建了线程，并且执行调用了重写的run方法，在run方法结束时，线程便会中止，也就是start0方法退出时。如果是直接调用run方法，即调用重写的run方法，这和普通方法没有什么区别，不会创建新线程，因为创建新线程，使线程处于就绪状态的操作在start方法中，而run方法会被jvm在start方法中的start0中调用。</p><p> 代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;<span class="comment">//实现Runnable接口</span></span><br><span class="line"></span><br><span class="line">　　<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">　　<span class="comment">//重写run方法</span></span><br><span class="line"></span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">　　<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="comment">//创建并启动线程</span></span><br><span class="line"></span><br><span class="line">　　　　MyThread2 myThread=<span class="keyword">new</span> MyThread2();</span><br><span class="line"></span><br><span class="line">　　　　Thread thread=<span class="keyword">new</span> Thread(myThread);</span><br><span class="line"></span><br><span class="line">　　　　thread().start();</span><br><span class="line"></span><br><span class="line">　　　　<span class="comment">//或者    new Thread(new MyThread2()).start();</span></span><br><span class="line"></span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>start0方法源码解析请看<a href="https://www.jianshu.com/p/81a56497e073" target="_blank" rel="noopener">https://www.jianshu.com/p/81a56497e073</a></p><p>一个线程可以多次调用start方法吗?</p><p>不能，会抛出下列异常，也就是非法线程状态异常，属于运行异常。查看源码可以看到在执行start时，会对线程状态进行判断，如果线程已经启动过，那么通常情况下无法再次进行启动，这一点在源码注释中也可以看到。即在同一个线程只能start一次，多次调用start方法会抛出异常。当调用start方法时，线程会被添加到线程组中，等待线程调度器调用，当获取到资源时，就进入运行状态。</p><p>源码分析请看<a href="https://cloud.tencent.com/developer/article/1386458" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1386458</a></p><p><strong>3)使用Callable和FutureTask创建线程步骤如下：</strong></p><p>和Runnable接口不一样，Callable接口提供了一个call（）方法作为线程执行体，call()方法比run()方法功能要强大。</p><blockquote><p><strong>call()方法可以有返回值</strong></p></blockquote><blockquote><p><strong>call()方法可以声明抛出异常</strong></p></blockquote><p>Java5之后提供了Future接口来代表Callable接口里call()方法的返回值，并且为Future接口提供了一个实现类FutureTask，这个实现类既实现了Future接口，还实现了Runnable接口，因此可以作为Thread类的target。在Future接口里定义了几个公共方法来控制它关联的Callable任务。</p><blockquote><p>boolean cancel(boolean mayInterruptIfRunning)：视图取消该Future里面关联的Callable任务</p></blockquote><blockquote><p>V get()：返回Callable里call（）方法的返回值，调用这个方法会导致程序阻塞，必须等到子线程结束后才会得到返回值</p></blockquote><blockquote><p>V get(long timeout,TimeUnit unit)：返回Callable里call（）方法的返回值，最多阻塞timeout时间，经过指定时间没有返回抛出TimeoutException</p></blockquote><blockquote><p>boolean isDone()：若Callable任务完成，返回True</p></blockquote><blockquote><p>boolean isCancelled()：如果在Callable任务正常完成前被取消，返回True</p></blockquote><p>介绍了相关的概念之后，创建并启动有返回值的线程的步骤如下：</p><p><font color="#006666"> 1】创建Callable接口的实现类，并实现call()方法，然后创建该实现类的实例（从java8开始可以直接使用Lambda表达式创建Callable对象）。</font><br></p><p><font color="#006666">2】使用FutureTask类来包装Callable对象，该FutureTask对象封装了Callable对象的call()方法的返回值</font><br></p><p><font color="#006666">3】使用FutureTask对象作为Thread对象的target创建并启动线程（因为FutureTask实现了Runnable接口）</font><br></p><p><font color="#006666">4】调用FutureTask对象的get()方法来获得子线程执行结束后的返回值</font><br></p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">　　<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">　　　MyThread3 th=<span class="keyword">new</span> MyThread3();</span><br><span class="line"></span><br><span class="line">　　　<span class="comment">//使用Lambda表达式创建Callable对象</span></span><br><span class="line"></span><br><span class="line">　　   <span class="comment">//使用FutureTask类来包装Callable对象</span></span><br><span class="line"></span><br><span class="line">　　　FutureTask&lt;Integer&gt; future=<span class="keyword">new</span> FutureTask&lt;Integer&gt;(</span><br><span class="line"></span><br><span class="line">　　　　(Callable&lt;Integer&gt;)()-&gt;&#123;</span><br><span class="line"></span><br><span class="line">　　　　　　<span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　  );</span><br><span class="line"></span><br><span class="line">　　　<span class="keyword">new</span> Thread(task,<span class="string">"有返回值的线程"</span>).start();<span class="comment">//实质上还是以Callable对象来创建并启动线程</span></span><br><span class="line"></span><br><span class="line">　　  <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　System.out.println(<span class="string">"子线程的返回值："</span>+future.get());<span class="comment">//get()方法会阻塞，直到子线程执行结束才返回</span></span><br><span class="line"></span><br><span class="line"> 　　 &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"></span><br><span class="line">　　　　ex.printStackTrace();</span><br><span class="line"></span><br><span class="line">　　　&#125;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>前三种方式比较：</strong></p><p>实现Runnable和实现Callable接口的方式基本相同，不过是后者执行call()方法有返回值，后者线程执行体run()方法无返回值，因此可以把这两种方式归为一种这种方式与继承Thread类的方法之间的差别如下：</p><p>1、线程只是实现Runnable或实现Callable接口，还可以继承其他类。</p><p>2、这种方式下，多个线程可以共享一个target对象，非常适合多线程处理同一份资源的情形。</p><p>3、但是编程稍微复杂，如果需要访问当前线程，必须调用Thread.currentThread()方法。</p><p>4、继承Thread类的线程类不能再继承其他父类（Java单继承决定）。</p><p>注：一般推荐采用实现接口的方式来创建多线程</p><p><strong>4)使用线程池，例如用Executor框架步骤如下：</strong></p><p>使用Executors工具类中的静态工厂方法用于创建线程池。</p><p>创建线程池使用execute方法启动线程。</p><p>使用shutdown方法等待提交的任务执行完成并后关闭线程。</p><p>Runnable和Callable有什么区别？</p><p>Runnable接口定义的run方法，Callable定义的是call方法。</p><p>run方法没有返回值，call方法必须有返回值。</p><p>run方法无法抛出异常，call方法可以抛出checked exception。</p><p>Callable和Runnable都可以应用于executors。而Thread类只支持Runnable.</p><p>几种方法优缺点对比：<a href="https://blog.csdn.net/sinat_27933301/article/details/69944286" target="_blank" rel="noopener">https://blog.csdn.net/sinat_27933301/article/details/69944286</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;java中创建多线程的4种方式&quot;&gt;&lt;a href=&quot;#java中创建多线程的4种方式&quot; class=&quot;headerlink&quot; title=&quot;java中创建多线程的4种方式&quot;&gt;&lt;/a&gt;java中创建多线程的4种方式&lt;/h4&gt;&lt;h5 id=&quot;1-线程是什么？&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="牛客小知识" scheme="http://yoursite.com/categories/%E7%89%9B%E5%AE%A2%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>浏览器中输入url会发生的过程</title>
    <link href="http://yoursite.com/2020/05/11/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E8%BE%93%E5%85%A5url%E4%BC%9A%E5%8F%91%E7%94%9F%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/05/11/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E8%BE%93%E5%85%A5url%E4%BC%9A%E5%8F%91%E7%94%9F%E7%9A%84%E8%BF%87%E7%A8%8B/</id>
    <published>2020-05-11T07:14:54.000Z</published>
    <updated>2020-05-11T12:08:49.382Z</updated>
    
    <content type="html"><![CDATA[<p>游览器输入地址之后与服务器交互的具体步骤</p><ol><li><p>DNS域名解析</p></li><li><p>建立TCP连接</p></li><li><p>发送HTTP请求</p></li><li><p>服务器处理请求</p></li><li><p>返回结果响应</p></li><li><p>关闭TCP连接</p></li><li><p>游览器解析HTML</p></li><li><p>布局渲染</p><p><a href="https://blog.csdn.net/ZWE7616175/article/details/80484905" target="_blank" rel="noopener">详细介绍地址</a></p></li></ol><h5 id="Tcp的三次握手协议"><a href="#Tcp的三次握手协议" class="headerlink" title="Tcp的三次握手协议"></a>Tcp的三次握手协议</h5><p><img src="/2020/05/11/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E8%BE%93%E5%85%A5url%E4%BC%9A%E5%8F%91%E7%94%9F%E7%9A%84%E8%BF%87%E7%A8%8B/tcp3.png" alt="没有找到这张图片"></p><p><strong>第一次握手：</strong>建立连接时，客户端发送syn包（syn=x）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。</p><p><strong>第二次握手：</strong>服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包（syn=y），即SYN+ACK包，此时服务器进入SYN_RECV状态；</p><p><strong>第三次握手：</strong>客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=y+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。</p><h5 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a><strong>常见面试题</strong></h5><p><strong>【问题1】</strong>为什么连接的时候是三次握手，关闭的时候却是四次握手？</p><p>答：因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端，”你发的FIN报文我收到了”。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。</p><p><strong>【问题2】</strong>为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态？</p><p>答：虽然按道理，四个报文都发送完毕，我们可以直接进入CLOSE状态了，但是我们必须假象网络是不可靠的，有可以最后一个ACK丢失。所以TIME_WAIT状态就是用来重发可能丢失的ACK报文。在Client发送出最后的ACK回复，但该ACK可能丢失。Server如果没有收到ACK，将不断重复发送FIN片段。所以Client不能立即关闭，它必须确认Server接收到了该ACK。Client会在发送出ACK之后进入到TIME_WAIT状态。Client会设置一个计时器，等待2MSL的时间。如果在该时间内再次收到FIN，那么Client会重发ACK并再次等待2MSL。所谓的2MSL是两倍的MSL(Maximum Segment Lifetime)。MSL指一个片段在网络中最大的存活时间，2MSL就是一个发送和一个回复所需的最大时间。如果直到2MSL，Client都没有再次收到FIN，那么Client推断ACK已经被成功接收，则结束TCP连接。</p><p><strong>【问题3】</strong>为什么不能用两次握手进行连接？</p><p>答：3次握手完成两个重要的功能，既要双方做好发送数据的准备工作(双方都知道彼此已准备好)，也要允许双方就初始序列号进行协商，这个序列号在握手过程中被发送和确认。</p><p>​    现在把三次握手改成仅需要两次握手，死锁是可能发生的。作为例子，考虑计算机S和C之间的通信，假定C给S发送一个连接请求分组，S收到了这个分组，并发 送了确认应答分组。按照两次握手的协定，S认为连接已经成功地建立了，可以开始发送数据分组。可是，C在S的应答分组在传输中被丢失的情况下，将不知道S 是否已准备好，不知道S建立什么样的序列号，C甚至怀疑S是否收到自己的连接请求分组。在这种情况下，C认为连接还未建立成功，将忽略S发来的任何数据分 组，只等待连接确认应答分组。而S在发出的分组超时后，重复发送同样的分组。这样就形成了死锁。</p><p><strong>【问题4】</strong>如果已经建立了连接，但是客户端突然出现故障了怎么办？</p><p>TCP还设有一个保活计时器，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p><p><a href="https://blog.csdn.net/qq_38950316/article/details/81087809" target="_blank" rel="noopener">原文链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;游览器输入地址之后与服务器交互的具体步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;DNS域名解析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;建立TCP连接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;发送HTTP请求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务器处理请求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p
      
    
    </summary>
    
    
      <category term="牛客小知识" scheme="http://yoursite.com/categories/%E7%89%9B%E5%AE%A2%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>什么是事务？</title>
    <link href="http://yoursite.com/2020/05/11/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%8B%E5%8A%A1%EF%BC%9F/"/>
    <id>http://yoursite.com/2020/05/11/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%8B%E5%8A%A1%EF%BC%9F/</id>
    <published>2020-05-11T07:07:00.000Z</published>
    <updated>2020-05-11T07:13:46.244Z</updated>
    
    <content type="html"><![CDATA[<p><strong>事务：</strong>是数据库操作的最小工作单元，是作为单个逻辑工作单元执行的一系列操作；这些操作作为一个整体一起向系统提交，要么都执行、要么都不执行；事务是一组不可再分割的操作集合（工作逻辑单元）；</p><p><strong>事务的四大特性：</strong></p><h6 id="1-、原子性"><a href="#1-、原子性" class="headerlink" title="1 、原子性"></a>1 、原子性</h6><p>事务是数据库的逻辑工作单位，事务中包含的各操作要么都做，要么都不做</p><h6 id="2-、一致性"><a href="#2-、一致性" class="headerlink" title="2 、一致性"></a>2 、一致性</h6><p>事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。因此当数据库只包含成功事务提交的结果时，就说数据库处于一致性状态。如果数据库系统运行中发生故障，有些事务尚未完成就被迫中断，这些未完成事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是 不一致的状态。 </p><h6 id="3-、隔离性"><a href="#3-、隔离性" class="headerlink" title="3 、隔离性"></a>3 、隔离性</h6><p>一个事务的执行不能其它事务干扰。即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。</p><h6 id="4-、持续性"><a href="#4-、持续性" class="headerlink" title="4 、持续性"></a>4 、持续性</h6><p>也称永久性，指一个事务一旦提交，它对数据库中的数据的改变就应该是永久性的。接下来的其它操作或故障不应该对其执行结果有任何影响。</p><p>原子性是基础，隔离性是手段，一致性是约束条件，而持久性是目的。</p><p>简称ACID</p><p>原子性（Atomicity），一致性（Consistency）,隔离性（Isolation）和持久性（Durability）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;事务：&lt;/strong&gt;是数据库操作的最小工作单元，是作为单个逻辑工作单元执行的一系列操作；这些操作作为一个整体一起向系统提交，要么都执行、要么都不执行；事务是一组不可再分割的操作集合（工作逻辑单元）；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;事务的四大特性：&lt;/st
      
    
    </summary>
    
    
      <category term="牛客小知识" scheme="http://yoursite.com/categories/%E7%89%9B%E5%AE%A2%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>测试</title>
    <link href="http://yoursite.com/2020/05/08/%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2020/05/08/%E6%B5%8B%E8%AF%95/</id>
    <published>2020-05-08T11:24:38.000Z</published>
    <updated>2020-05-11T02:58:43.033Z</updated>
    
    <content type="html"><![CDATA[<p>没有什么，测试而已</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;没有什么，测试而已&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>利用Eureka注册中心动态获取服务</title>
    <link href="http://yoursite.com/2019/12/21/%E5%88%A9%E7%94%A8Eureka%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%8A%A8%E6%80%81%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/2019/12/21/%E5%88%A9%E7%94%A8Eureka%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%8A%A8%E6%80%81%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1/</id>
    <published>2019-12-21T13:05:33.000Z</published>
    <updated>2020-05-11T02:57:13.410Z</updated>
    
    <content type="html"><![CDATA[<p>​        在上一节的微服务场景模拟中，存在以下问题：</p><ul><li>在consumer中，我们把url地址硬编码到了代码中，不方便后期维护</li><li>consumer需要记忆user-service的地址，如果出现变更，可能得不到通知，地址将失效</li><li>consumer不清楚user-service的状态，服务宕机也不知道</li><li>user-service只有1台服务，不具备高可用性</li><li>即便user-service形成集群，consumer还需自己实现负载均衡</li></ul><p>其实上面说的问题，概括一下就是分布式服务必然要面临的问题：</p><ul><li>服务管理<ul><li>如何自动注册和发现</li><li>如何实现状态监管</li><li>如何实现动态路由</li></ul></li><li>服务如何实现负载均衡</li><li>服务如何解决容灾问题</li><li>服务如何实现统一配置</li></ul><a id="more"></a><h3 id="一、Eureka注册中心"><a href="#一、Eureka注册中心" class="headerlink" title="一、Eureka注册中心"></a>一、Eureka注册中心</h3><h4 id="1-1-了解Eureka"><a href="#1-1-了解Eureka" class="headerlink" title="1.1 了解Eureka"></a>1.1 了解Eureka</h4><p>​        Eureka就像是一个中介，负责管理、记录服务提供者的信息，服务提供者在这个中心上注册自己所提供的服务，Eureka负责检测这个服务提供者是否在持续的提供服务，如果检测到服务终止，那么就会在注册中心进行注销，服务调用者也就不会使用到没法提供服务的服务商；同时，服务调用者也需在中心进行注册，把自己的需求告诉Eureka，然后Eureka会把负荷你需求的服务告诉你。</p><p>​        Eureka实现了服务的自动注册、发现、状态监控。</p><h4 id="1-2-编写EurekaServer"><a href="#1-2-编写EurekaServer" class="headerlink" title="1.2 编写EurekaServer"></a>1.2 编写EurekaServer</h4><p>​        创建module，以cloud-demo为父工程，添加依赖。</p><ul><li>子工程Eureka-server的pom.xml配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.nedlee.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Eureka服务端 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nedlee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableEurekaServer</span><span class="comment">//注解提供Eureka服务</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaServer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>application.yml配置文件</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><h3 id="二、将user-service注册到Eureka"><a href="#二、将user-service注册到Eureka" class="headerlink" title="二、将user-service注册到Eureka"></a>二、将user-service注册到Eureka</h3><p>​        注册服务，就是在服务上添加Eureka的客户端依赖，客户端代码会自动把服务注册到EurekaServer中。</p><ul><li>在user-service子工程的pom.xml中添加springcloud依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.nedlee.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在启动类上开启Eureka客户端功能</p></blockquote><p>通过添加<code>@EnableDiscoveryClient</code>来开启Eureka客户端功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">// 开启EurekaClient功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceDemoApplication</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(UserServiceDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>application.yml文件配置</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-service</span> <span class="comment"># 应用名称</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/leyou</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">873383</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">cn.nedlee.user.pojo</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># EurekaServer地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">      <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="comment"># 指定自己的ip信息，不指定的话会自己寻找</span></span><br></pre></td></tr></table></figure><h3 id="三、消费者从Eureka获取服务"><a href="#三、消费者从Eureka获取服务" class="headerlink" title="三、消费者从Eureka获取服务"></a>三、消费者从Eureka获取服务</h3><p>​        方法与服务提供者类似，只需要在项目中添加EurekaClient依赖，就可以通过服务名称来获取信息了！</p><ul><li>在子工程consumer-demo的pom.xml中添加springcloud依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.nedlee.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>consumer-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在启动类开启Eureka客户端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">// 开启Eureka客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConsumerDemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate(<span class="keyword">new</span> OkHttp3ClientHttpRequestFactory());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(UserConsumerDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改application.yml配置文件</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8088</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><ul><li>修改代码，用DiscoveryClient类的方法，根据服务名称，获取服务实例。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nedlee.consumer.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.nedlee.consumer.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.DiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"consumer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="comment">//根据服务id获取实例</span></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">"user-service"</span>);</span><br><span class="line">        <span class="comment">//从实例中取出ip和端口</span></span><br><span class="line">        <span class="comment">// 因为只有一个User-Service,因此我们直接get(0)获取</span></span><br><span class="line">        ServiceInstance instance = instances.get(<span class="number">0</span>);</span><br><span class="line">        String url = <span class="string">"http://"</span>+instance.getHost() + <span class="string">":"</span> +instance.getPort()+<span class="string">"/user/"</span> + id;</span><br><span class="line">        User user = restTemplate.getForObject(url,User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        至此，Eureka注册中心的功能以基本实现，需要注意的是Eureka注册中心也需要将自己注册到该中心，以@EurekaServer的方式开启服务，在中心的服务提供者与调用者都是以@EurekaDiscoveryClient的方式开启客户端，也可以使用@EurekaClient，但是前者更加通用，因为服务中心不止Eureka这一家。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​        在上一节的微服务场景模拟中，存在以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在consumer中，我们把url地址硬编码到了代码中，不方便后期维护&lt;/li&gt;
&lt;li&gt;consumer需要记忆user-service的地址，如果出现变更，可能得不到通知，地址将失效&lt;/li&gt;
&lt;li&gt;consumer不清楚user-service的状态，服务宕机也不知道&lt;/li&gt;
&lt;li&gt;user-service只有1台服务，不具备高可用性&lt;/li&gt;
&lt;li&gt;即便user-service形成集群，consumer还需自己实现负载均衡&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实上面说的问题，概括一下就是分布式服务必然要面临的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务管理&lt;ul&gt;
&lt;li&gt;如何自动注册和发现&lt;/li&gt;
&lt;li&gt;如何实现状态监管&lt;/li&gt;
&lt;li&gt;如何实现动态路由&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务如何实现负载均衡&lt;/li&gt;
&lt;li&gt;服务如何解决容灾问题&lt;/li&gt;
&lt;li&gt;服务如何实现统一配置&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="框架学习、springboot与springcloud" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E3%80%81springboot%E4%B8%8Espringcloud/"/>
    
    
      <category term="springcloud" scheme="http://yoursite.com/tags/springcloud/"/>
    
  </entry>
  
  <entry>
    <title>利用SpringBoot模拟微服务场景</title>
    <link href="http://yoursite.com/2019/12/19/%E5%88%A9%E7%94%A8SpringBoot%E6%A8%A1%E6%8B%9F%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%9C%BA%E6%99%AF/"/>
    <id>http://yoursite.com/2019/12/19/%E5%88%A9%E7%94%A8SpringBoot%E6%A8%A1%E6%8B%9F%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%9C%BA%E6%99%AF/</id>
    <published>2019-12-19T11:32:28.000Z</published>
    <updated>2020-05-11T02:57:27.613Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、了解微服务"><a href="#一、了解微服务" class="headerlink" title="一、了解微服务"></a>一、了解微服务</h2><h3 id="1-1-什么是微服务？"><a href="#1-1-什么是微服务？" class="headerlink" title="1.1 什么是微服务？"></a>1.1 什么是微服务？</h3><p>​         微服务架构的系统是一个分布式的系统，按业务进行划分为独立的服务单元，解决单体系统的不足，同时也满足越来越复杂的业务需求。 </p><p>​        总的来说微服务就是将一个单体架构的应用按业务划分为一个个独立运行的程序即服务，它们之间通过HTTP协议进行通信（也可以采用消息队列来通信，如 RoocketMQ，Kafaka等 ），可以采用不同的编程语言，使用不同的存储技术，自动化部署（如Jenkins）减少人为控制，降低出错概率。服务数量越多，管理起来越复杂，因此采用集中化管理。例如 Eureka，Zookeeper等都是比较常见的服务集中化管理框架。 </p><p><strong>微服务的特点：</strong></p><ul><li>单一职责：微服务中每一个服务都对应唯一的业务能力，做到单一职责</li><li>微：微服务的服务拆分粒度很小，例如一个用户管理就可以作为一个服务。每个服务虽小，但“五脏俱全”。</li><li>面向服务：面向服务是说每个服务都要对外暴露服务接口API。并不关心服务的技术实现，做到与平台和语言无关，也不限定用什么技术实现，只要提供Rest的接口即可。</li><li>自治：自治是说服务间互相独立，互不干扰<ul><li>团队独立：每个服务都是一个独立的开发团队，人数不能过多。</li><li>技术独立：因为是面向服务，提供Rest接口，使用什么技术没有别人干涉</li><li>前后端分离：采用前后端分离开发，提供统一Rest接口，后端不用再为PC、移动段开发不同接口</li><li>数据库分离：每个服务都使用自己的数据源</li><li>部署独立，服务间虽然有调用，但要做到服务重启不影响其它服务。有利于持续集成和持续交付。每个服务都是独立的组件，可复用，可替换，降低耦合，易维护</li></ul></li></ul><a id="more"></a><p><strong>微服务与SOA(面向服务)比较</strong></p><table><thead><tr><th align="center">微服务</th><th align="center">SOA</th></tr></thead><tbody><tr><td align="center">能拆分的就拆分</td><td align="center">是整体的，服务能放一起的都放一起</td></tr><tr><td align="center">纵向业务划分</td><td align="center">是水平分多层</td></tr><tr><td align="center">由单一组织负责</td><td align="center">按层级划分不同部门的组织负责</td></tr><tr><td align="center">细粒度</td><td align="center">粗粒度</td></tr><tr><td align="center">两句话可以解释明白</td><td align="center">几百字只相当于SOA的目录</td></tr><tr><td align="center">独立的子公司</td><td align="center">类似大公司里面划分了一些业务单元（BU）</td></tr><tr><td align="center">组件小</td><td align="center">存在较复杂的组件</td></tr><tr><td align="center">业务逻辑存在于每一个服务中</td><td align="center">业务逻辑横跨多个业务领域</td></tr><tr><td align="center">使用轻量级的通信方式，如HTTP</td><td align="center">企业服务生产总线(ESB)充当了服务之间通信的角色</td></tr></tbody></table><h3 id="1-2-远程调用方式"><a href="#1-2-远程调用方式" class="headerlink" title="1.2 远程调用方式"></a>1.2 远程调用方式</h3><p>无论是微服务还是SOA，都面临着服务间的远程调用。那么服务间的远程调用方式有哪些呢？</p><p>常见的远程调用方式有以下几种：</p><ul><li><p>RPC：Remote Produce Call远程过程调用，类似的还有RMI。自定义数据格式，基于原生TCP通信，速度快，效率高。早期的webservice，现在热门的dubbo，都是RPC的典型</p></li><li><p>Http：http其实是一种网络传输协议，基于TCP，规定了数据传输的格式。现在客户端浏览器与服务端通信基本都是采用Http协议。也可以用来进行远程服务调用。缺点是消息封装臃肿。</p><p>现在热门的Rest风格，就可以通过http协议来实现。</p></li></ul><p>本次模拟使用的是Http方式实现远程调用。</p><h2 id="二、微服务场景模拟"><a href="#二、微服务场景模拟" class="headerlink" title="二、微服务场景模拟"></a>二、微服务场景模拟</h2><p>理解学习微服务架构</p><h3 id="2-1-创建父工程"><a href="#2-1-创建父工程" class="headerlink" title="2.1 创建父工程"></a>2.1 创建父工程</h3><p>​        父工程的作用就是对子工程各种依赖的版本控制实现统一的管理，以便版本升级时方便控制。微服务中需要同时创建多个项目，创建了父工程，后续的工程都以这个工程为父，实现maven的聚合。这样可以在一个窗口看到所有工程。<strong>在实际开发中，应该每个微服务独立一个工程</strong></p><ul><li><p>父工程的pom.xml配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.nedlee.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>user-service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>consumer-demo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--父类型都为pom类型，pom 项目里没有java代码，也不执行任何代码，只是为了聚合工程或传递依赖用的。--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Finchley.SR1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper.starter.version</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">mapper.starter.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过&lt;properties&gt;元素用户可以自定义一个或多个Maven属性，</span></span><br><span class="line"><span class="comment">    然后在POM的其他地方使用$&#123;属性名&#125;的方式引用该属性，这种做法的最大意义在于消除重复和统一管理。--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--在&lt;dependencyManagement&gt;里的依赖所有子工程都需要手动引入，没在这里面的就都会有这个依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springCloud--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通用mapper启动器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mapper.starter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--Spring Boot的Maven插件，能够以Maven的方式为应用提供Spring Boot的支持，</span></span><br><span class="line"><span class="comment">                即为Spring Boot应用提供了执行Maven操作的可能。--&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2-服务提供者"><a href="#2-2-服务提供者" class="headerlink" title="2.2 服务提供者"></a>2.2 服务提供者</h3><p>新建一个项目，对外提供查询用户的服务。</p><h4 id="2-2-1-创建module"><a href="#2-2-1-创建module" class="headerlink" title="2.2.1 创建module"></a>2.2.1 创建module</h4><ul><li>在创建子工程时要选中父工程</li><li>服务提供者的pom.xml配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.nedlee.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>子工程中的application.yml配置文件，配置文件名为application，Spring会在服务启动时自动扫描该配置文件，在该配置文件中配置了连接数据源，数据访问的端口号，以及指定POJO扫描包来让mybatis自动扫描到自定义POJO( Plain Ordinary Java Object -&gt;简单的java对象)，还可以灵活配置许多其他条件。</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/leyou</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">8733</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">cn.nedlee.user.pojo</span></span><br></pre></td></tr></table></figure><ul><li>启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"cn.nedlee.user.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(UserApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*@SpringBootApplication其实就是以下三个注解的总和</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@Configuration： 用于定义一个配置类</span></span><br><span class="line"><span class="comment">这个注解的作用与@Configuration作用相同，都</span></span><br><span class="line"><span class="comment">是用来声明当前类是一个配置类．可以通过＠Bean注解生成IOC容器管理的bean.</span></span><br><span class="line"><span class="comment">在QuickStartApplication中定义bean，并在＠HelloController中注入使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@EnableAutoConfiguration ：Spring Boot会自动根据你jar包的依赖来自动配置项目。</span></span><br><span class="line"><span class="comment">@EnableAutoConfiguration是springboot实现自动化配置的核心注解，通过这个注解把spring应用所需的bean注入容器中．</span></span><br><span class="line"><span class="comment">@EnableAutoConfiguration源码通过@Import注入了一个ImportSelector的实现类</span></span><br><span class="line"><span class="comment">AutoConfigurationImportSelector,这个ImportSelector最终实现根据我们的配置，动态加载所需的bean.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@ComponentScan： 告诉Spring 哪个packages 的用注解标识的类 会被spring自动扫描并且装入bean容器。</span></span><br><span class="line"><span class="comment">spring里有四大注解：@Service,@Repository,@Component,@Controller用来定义一个bean.</span></span><br><span class="line"><span class="comment">@ComponentScan注解就是用来自动扫描被这些注解标识的类，最终生成ioc容器里的bean．</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_user"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@KeySql</span>(useGeneratedKeys = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;<span class="comment">// 用户名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;<span class="comment">// 密码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">// 姓名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;<span class="comment">// 年龄</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sex;<span class="comment">// 性别，1男性，2女性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birthday;<span class="comment">// 出生日期</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date created;<span class="comment">// 创建时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updated;<span class="comment">// 更新时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String note;<span class="comment">// 备注</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 。。。省略getters和setters</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@Table注解  作用是 ： 声明此对象映射到数据库的数据表，通过它可以为实体指定表(talbe)</span></span><br><span class="line"><span class="comment">@Data注解   作用是 ： 帮你的类提供了getXxx()、setXxx()方法、equals()、hashCode()、toString() 这些方法。也就是说只要你的类上写了这个注解，那就不需要再生成get、set、toString等方法了。</span></span><br><span class="line"><span class="comment">@Id注解  作用是 ： 确定该字段为数据库中的主键</span></span><br><span class="line"><span class="comment">@KeySql(useGeneratedKeys = true)注解  作用是 ： 使用 JDBC 的方式获取数据库自增的主键值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>mapper</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.nedlee.user.pojo.User;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*这里继承了 tk.mybatis.mapper.common.Mapper 接口，在接口上指定了泛型类型 User。当你继承了 Mapper 接口后，此时就已经有了针对 User 的大量方法，包括对单表简单的增删改查，所以就可以不写数据库语句了*/</span></span><br></pre></td></tr></table></figure><ul><li>service</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.nedlee.user.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> cn.nedlee.user.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(<span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@Service注解：声明UserService是一个Bean，这个注解是写在类上面的，标注将这个类交给Spring容器管理，spring容器要为他创建对象</span></span><br><span class="line"><span class="comment">@Autowired注解:当Spring发现@Autowired注解时，将自动在代码上下文中找到和其匹配（默认是类型匹配）的Bean，并自动注入到相应的地方去。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>添加一个对外查询的接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.nedlee.user.pojo.User;</span><br><span class="line"><span class="keyword">import</span> cn.nedlee.user.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@RestController = @Controller + @ResponseBody组成</span></span><br><span class="line"><span class="comment">@Controller 将当前修饰的类注入SpringBoot IOC容器，使得从该类所在的项目跑起来的过程中，这个类就被实例化。当然也有语义化的作用，即代表该类是充当Controller的作用</span></span><br><span class="line"><span class="comment">@ResponseBody 它的作用简短截说就是指该类中所有的API接口返回的数据，甭管你对应的方法返回Map或是其他Object，它会以Json字符串的形式返回给客户端.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@RequestMapping("user")注解，游览器访问user的请求会被userController类的queryById()方法处理。</span></span><br><span class="line"><span class="comment">@GetMapping("/&#123;id&#125;")注解，得到URL中的请求参数，并通过 @PathVariable 可以将URL中占位符参数&#123;id&#125;绑定到处理器类的方法形参中，</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><p>访问：(<a href="http://localhost:8081/user/9)会查询一个结果打印在游览器上。" target="_blank" rel="noopener">http://localhost:8081/user/9)会查询一个结果打印在游览器上。</a></p><h3 id="2-3-服务调用者"><a href="#2-3-服务调用者" class="headerlink" title="2.3 服务调用者"></a>2.3 服务调用者</h3><h4 id="2-3-1-创建工程"><a href="#2-3-1-创建工程" class="headerlink" title="2.3.1 创建工程"></a>2.3.1 创建工程</h4><p>与上面类似，创建module，选中父工程，需要注意的是，此工程调用的是user-service的功能，因此不需要mybatis的相关依赖了。</p><ul><li>服务调用者consumer-demo的pom.xml配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.nedlee.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>consumer-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();<span class="comment">//实现服务之间的调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;<span class="comment">// 用户名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;<span class="comment">// 密码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">// 姓名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;<span class="comment">// 年龄</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sex;<span class="comment">// 性别，1男性，2女性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birthday;<span class="comment">// 出生日期</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date created;<span class="comment">// 创建时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updated;<span class="comment">// 更新时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String note;<span class="comment">// 备注</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 。。。省略getters和setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写controller，在controller中直接调用RestTemplate，远程访问user-service的服务接口。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"consumer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line">        String url = <span class="string">"http://localhost:8081/user/"</span> + id;</span><br><span class="line">        User user = restTemplate.getForObject(url,User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4 总结"></a>2.4 总结</h3><p>​        首先创建的是父工程，在父工程的pom配置文件中进行整体的依赖版本控制，对于子工程所需的依赖，可以从父工程中进行引入。之后在父工程下创建module工程一(user-service)服务提供者，在这个工程中需要进行对数据库的访问，所以要引入mybatis的依赖。在user-service工程中，首先要编写的是启动类，接着是实体类，用于接收从数据库中查询到的相应数据，@table注解就是用来指定在数据库中的哪张表对应于该实体类。接着就是mapper接口与service，在mapper中定义了一个UserMapper接口，继承了通用mybatis的mapper，泛型为User，spring就根据该泛型定义了许多针对单表的数据库语句，所以在该mapper中无需编写数据库语句，要用的时候，例如在service中，直接注入与调用即可。最后就是编写一个对完查询的接口，实现当游览器访问相应资源时，调用相应的方法，返回相应的值给游览器。对于服务的调用者，与服务的提供者一样，现在父工程下创建module工程(consumer-demo)服务调用者，首先编写启动类，接着编写实体类，只是用来接收查询到的相关的数据，并不作查询数据库之用，再编写一个对外查询的接口，注入Restemplate，实现服务间的调用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、了解微服务&quot;&gt;&lt;a href=&quot;#一、了解微服务&quot; class=&quot;headerlink&quot; title=&quot;一、了解微服务&quot;&gt;&lt;/a&gt;一、了解微服务&lt;/h2&gt;&lt;h3 id=&quot;1-1-什么是微服务？&quot;&gt;&lt;a href=&quot;#1-1-什么是微服务？&quot; class=&quot;headerlink&quot; title=&quot;1.1 什么是微服务？&quot;&gt;&lt;/a&gt;1.1 什么是微服务？&lt;/h3&gt;&lt;p&gt;​         微服务架构的系统是一个分布式的系统，按业务进行划分为独立的服务单元，解决单体系统的不足，同时也满足越来越复杂的业务需求。 &lt;/p&gt;
&lt;p&gt;​        总的来说微服务就是将一个单体架构的应用按业务划分为一个个独立运行的程序即服务，它们之间通过HTTP协议进行通信（也可以采用消息队列来通信，如 RoocketMQ，Kafaka等 ），可以采用不同的编程语言，使用不同的存储技术，自动化部署（如Jenkins）减少人为控制，降低出错概率。服务数量越多，管理起来越复杂，因此采用集中化管理。例如 Eureka，Zookeeper等都是比较常见的服务集中化管理框架。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;微服务的特点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单一职责：微服务中每一个服务都对应唯一的业务能力，做到单一职责&lt;/li&gt;
&lt;li&gt;微：微服务的服务拆分粒度很小，例如一个用户管理就可以作为一个服务。每个服务虽小，但“五脏俱全”。&lt;/li&gt;
&lt;li&gt;面向服务：面向服务是说每个服务都要对外暴露服务接口API。并不关心服务的技术实现，做到与平台和语言无关，也不限定用什么技术实现，只要提供Rest的接口即可。&lt;/li&gt;
&lt;li&gt;自治：自治是说服务间互相独立，互不干扰&lt;ul&gt;
&lt;li&gt;团队独立：每个服务都是一个独立的开发团队，人数不能过多。&lt;/li&gt;
&lt;li&gt;技术独立：因为是面向服务，提供Rest接口，使用什么技术没有别人干涉&lt;/li&gt;
&lt;li&gt;前后端分离：采用前后端分离开发，提供统一Rest接口，后端不用再为PC、移动段开发不同接口&lt;/li&gt;
&lt;li&gt;数据库分离：每个服务都使用自己的数据源&lt;/li&gt;
&lt;li&gt;部署独立，服务间虽然有调用，但要做到服务重启不影响其它服务。有利于持续集成和持续交付。每个服务都是独立的组件，可复用，可替换，降低耦合，易维护&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="框架学习" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot-day01</title>
    <link href="http://yoursite.com/2019/12/17/SpringBoot-day01/"/>
    <id>http://yoursite.com/2019/12/17/SpringBoot-day01/</id>
    <published>2019-12-17T02:35:06.000Z</published>
    <updated>2020-05-11T02:58:26.629Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、了解-Spring-Boot"><a href="#一、了解-Spring-Boot" class="headerlink" title="一、了解 Spring Boot"></a>一、了解 Spring Boot</h2><h3 id="1-1-什么是Spring-Boot？"><a href="#1-1-什么是Spring-Boot？" class="headerlink" title="1.1 什么是Spring Boot？"></a>1.1 什么是Spring Boot？</h3><pre><code>Spring Boot是Spring项目中的一个子工程，与我们所熟知的Spring-framework 同属于spring的产品。</code></pre><p>​        官网解释翻译为：</p><blockquote><p>用一些固定的方式来构建生产级别的spring应用。Spring Boot 推崇约定大于配置的方式以便于你能够尽可能快速的启动并运行程序。</p></blockquote><p>其实人们把Spring Boot 称为搭建程序的`<strong>脚手架</strong>`。其最主要作用就是帮我们快速的构建庞大的spring项目，并且尽可能的减少一切xml配置，做到开箱即用，迅速上手，让我们关注与业务而非配置。</p><h3 id="1-2-为什么学习Spring-Boot？"><a href="#1-2-为什么学习Spring-Boot？" class="headerlink" title="1.2 为什么学习Spring Boot？"></a>1.2 为什么学习Spring Boot？</h3><p>java一直被人诟病的一点就是臃肿、麻烦。其主要原因有两点：</p><ul><li><p>复杂的配置</p><p>项目各种配置其实是开发时的损耗， 因为在思考 Spring 特性配置和解决业务问题之间需要进行思维切换，所以写配置挤占了写应用程序逻辑的时间。</p></li><li><p>一个是混乱的依赖管理</p><p>项目的依赖管理也是件吃力不讨好的事情。决定项目里要用哪些库就已经够让人头痛的了，你还要知道这些库的哪个版本和其他库不会有冲突，这难题实在太棘手。并且，依赖管理也是一种损耗，添加依赖不是写应用程序代码。一旦选错了依赖的版本，随之而来的不兼容问题毫无疑问会是生产力杀手。</p></li></ul><p>而Spring Boot让这一切成为过去！</p><blockquote><p>Spring Boot 简化了基于Spring的应用开发，只需要“run”就能创建一个独立的、生产级别的Spring应用。Spring Boot为Spring平台及第三方库提供开箱即用的设置（提供默认设置，存放默认配置的包就是启动器），这样我们就可以简单的开始。多数Spring Boot应用只需要很少的Spring配置。</p></blockquote><p>我们可以使用SpringBoot创建java应用，并使用java –jar 启动它，就能得到一个生产级别的web工程。</p><a id="more"></a><h3 id="1-3-SpringBoot的特点"><a href="#1-3-SpringBoot的特点" class="headerlink" title="1.3 SpringBoot的特点"></a>1.3 SpringBoot的特点</h3><p>Spring Boot 主要目标是：</p><ul><li>为所有 Spring 的开发者提供一个非常快速的、广泛接受的入门体验</li><li>开箱即用（启动器starter-其实就是SpringBoot提供的一个jar包），但通过自己设置参数（.properties），即可快速摆脱这种方式。</li><li>提供了一些大型项目中常见的非功能性特性，如内嵌服务器、安全、指标，健康检测、外部化配置等</li><li>绝对没有代码生成，也无需 XML 配置。</li></ul><p>更多细节，大家可以到<a href="http://projects.spring.io/spring-boot/" target="_blank" rel="noopener">官网</a>查看。</p><h2 id="二、快速入门"><a href="#二、快速入门" class="headerlink" title="二、快速入门"></a>二、快速入门</h2><h3 id="2-1-创建工程"><a href="#2-1-创建工程" class="headerlink" title="2.1 创建工程"></a>2.1 创建工程</h3><p>快速创建一个maven工程，在idea中使用自己的maven仓库，maven版本不能太高，否则项目依赖无法正常导入，配置maven的settings.xml文件网上有很多教程，使用国内的阿里镜像导入依赖会很快。</p><h3 id="2-2-添加依赖"><a href="#2-2-添加依赖" class="headerlink" title="2.2 添加依赖"></a>2.2 添加依赖</h3><p>在pom.xml中添加使用springboot相关的依赖。</p><h4 id="2-2-1-添加父工程坐标"><a href="#2-2-1-添加父工程坐标" class="headerlink" title="2.2.1 添加父工程坐标"></a>2.2.1 添加父工程坐标</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-添加web启动器"><a href="#2-2-2-添加web启动器" class="headerlink" title="2.2.2 添加web启动器"></a>2.2.2 添加web启动器</h4><p>为了让SpringBoot帮我们完成各种自动配置，我们必须引入SpringBoot提供的自动配置依赖，我们称为`启动器`。因为我们是web项目，这里我们引入web启动器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，我们并没有在这里指定版本信息。因为SpringBoot的父工程已经对版本进行了管理了。</p><p>这个时候，我们会发现项目中多出了大量的依赖。</p><h4 id="2-2-3-管理jdk版本"><a href="#2-2-3-管理jdk版本" class="headerlink" title="2.2.3 管理jdk版本"></a>2.2.3 管理jdk版本</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-4-完整-pom-xml文件"><a href="#2-2-4-完整-pom-xml文件" class="headerlink" title="2.2.4 完整 pom.xml文件"></a>2.2.4 完整 pom.xml文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-启动类"><a href="#2-3-启动类" class="headerlink" title="2.3 启动类"></a>2.3 启动类</h3><p>Spring Boot项目通过main函数即可启动，我们需要创建一个启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-编写controller"><a href="#2-4-编写controller" class="headerlink" title="2.4 编写controller"></a>2.4 编写controller</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;responseBody一般是作用在方法上的，加上该注解表示该方法的返回结果直接写到Http response Body中，常用在ajax异步请求中，</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;在RequestMapping中 return返回值默认解析为跳转路径，如果你此时想让Controller返回一个字符串或者对象到前台 就会报404 not response的错误。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;当加上@ResponseBody注解后不会解析成跳转地址 会解析成相应的json格式的对象 集合 字符串或者xml等直接返回给前台 可以通过 ajax 的“success”：fucntion(data)&#123;&#125; data直接获取到。</span><br><span class="line">    @GetMapping(&quot;hello&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String hello()&#123;</span><br><span class="line">        return &quot;hello spring boot&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-启动测试"><a href="#2-5-启动测试" class="headerlink" title="2.5 启动测试"></a>2.5 启动测试</h3><ul><li>1）监听的端口是8080</li><li>2）SpringMVC的映射路径是：/</li><li>3）<code>/hello</code>路径已经映射到了<code>HelloController</code>中的<code>hello()</code>方法</li></ul><p>打开页面访问：<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a>    页面有所显示就是成功了！</p><h2 id="三、Java配置"><a href="#三、Java配置" class="headerlink" title="三、Java配置"></a>三、Java配置</h2><h3 id="3-1-尝试java配置数据库连接池"><a href="#3-1-尝试java配置数据库连接池" class="headerlink" title="3.1 尝试java配置数据库连接池"></a>3.1 尝试java配置数据库连接池</h3><p>java配置主要靠java类和一些注解，比较常用的注解有：</p><ul><li><code>@Configuration</code>：声明一个类作为配置类，代替xml文件</li><li><code>@Bean</code>：声明在方法上，将方法的返回值加入Bean容器，代替<code>&lt;bean&gt;</code>标签</li><li><code>@value</code>：属性注入</li><li><code>@PropertySource</code>：指定外部属性文件，</li></ul><p>接下来用java配置来尝试实现连接池配置：</p><p>首先引入Druid连接池依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建一个jdbc.properties文件，编写jdbc属性：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/leyou</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123</span></span><br></pre></td></tr></table></figure><p>然后编写代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:jdbc.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.url&#125;"</span>)</span><br><span class="line">    String url;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>)</span><br><span class="line">    String driverClassName;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.username&#125;"</span>)</span><br><span class="line">    String username;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.password&#125;"</span>)</span><br><span class="line">    String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setDriverClassName(driverClassName);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解读：</p><ul><li><code>@Configuration</code>：声明我们<code>JdbcConfig</code>是一个配置类</li><li><code>@PropertySource</code>：指定属性文件的路径是:<code>classpath:jdbc.properties</code></li><li>通过<code>@Value</code>为属性注入值</li><li>通过@Bean将 <code>dataSource()</code>方法声明为一个注册Bean的方法，Spring会自动调用该方法，将方法的返回值加入Spring容器中。</li></ul><p>然后我们就可以在任意位置通过<code>@Autowired</code>注入DataSource了！</p><p>我们在<code>HelloController</code>中测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello, spring boot!"</span> + dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后Debug运行并查看，重新访问hello页面，之后到控制台进行查看，只要有之前jdbc.properties </p><p>中的属性显示，就算成功了！</p><h3 id="3-2-SpringBoot的属性注入"><a href="#3-2-SpringBoot的属性注入" class="headerlink" title="3.2 SpringBoot的属性注入"></a>3.2 SpringBoot的属性注入</h3><p>在上面的案例中，实现了java配置方式。不过属性注入使用的是@Value注解。这种方式虽然可行，但是不够强大，因为它只能注入基本类型值。</p><p>在SpringBoot中，提供了一种新的属性注入方式，支持各种java基本数据类型及复杂类型的注入。</p><p>1）新建一个类，用来进行属性注入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"jdbc"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">// ... 略</span></span><br><span class="line">    <span class="comment">// getters 和 setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在类上通过@ConfigurationProperties注解声明当前类为属性读取类</p></li><li><p><code>prefix=&quot;jdbc&quot;</code>读取属性文件中，前缀为jdbc的值。</p></li><li><p>在类上定义各个属性，名称必须与属性文件中<code>jdbc.</code>后面部分一致</p></li><li><p>需要注意的是，这里我们并没有指定属性文件的地址，所以我们需要把jdbc.properties名称改为application.properties，这是SpringBoot默认读取的属性文件名：</p></li></ul><p>2）在JdbcConfig中使用这个属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(JdbcProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">(JdbcProperties jdbc)</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setUrl(jdbc.getUrl());</span><br><span class="line">        dataSource.setDriverClassName(jdbc.getDriverClassName());</span><br><span class="line">        dataSource.setUsername(jdbc.getUsername());</span><br><span class="line">        dataSource.setPassword(jdbc.getPassword());</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>通过<code>@EnableConfigurationProperties(JdbcProperties.class)</code>来声明要使用<code>JdbcProperties</code>这个类的对象</p></li><li><p>然后你可以通过以下方式注入JdbcProperties：</p><ul><li>@Autowired注入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JdbcProperties prop;</span><br></pre></td></tr></table></figure><ul><li>构造函数注入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> JdbcProperties prop;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JdbcConfig</span><span class="params">(Jdbcproperties prop)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.prop = prop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>声明有@Bean的方法参数注入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Datasource <span class="title">dataSource</span><span class="params">(JdbcProperties prop)</span></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>本例中，我们采用第三种方式。</p><p>3）测试结果会如上一次一样。</p><p>优势：</p><ul><li><p>Relaxed binding：松散绑定</p><ul><li><p>不严格要求属性文件中的属性名与成员变量名一致。支持驼峰，中划线，下划线等等转换，甚至支持对象引导。比如：user.friend.name：代表的是user对象中的friend属性中的name属性，显然friend也是对象。@value注解就难以完成这样的注入方式。</p></li><li><p>meta-data support：元数据支持，帮助IDE生成属性提示（写开源框架会用到）。</p></li></ul></li></ul><h3 id="3-3-更优雅的注入"><a href="#3-3-更优雅的注入" class="headerlink" title="3.3 更优雅的注入"></a>3.3 更优雅的注入</h3><p>事实上，如果一段属性只有一个Bean需要使用，我们无需将其注入到一个类（JdbcProperties）中。而是直接在需要的地方声明即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// 声明要注入的属性前缀，SpringBoot会自动把相关属性通过set方法注入到DataSource中</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"jdbc"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们直接把<code>@ConfigurationProperties(prefix = &quot;jdbc&quot;)</code>声明在需要使用的<code>@Bean</code>的方法上，然后SpringBoot就会自动调用这个Bean（此处是DataSource）的set方法，然后完成注入。使用的前提是：<strong>该类必须有对应属性的set方法！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、了解-Spring-Boot&quot;&gt;&lt;a href=&quot;#一、了解-Spring-Boot&quot; class=&quot;headerlink&quot; title=&quot;一、了解 Spring Boot&quot;&gt;&lt;/a&gt;一、了解 Spring Boot&lt;/h2&gt;&lt;h3 id=&quot;1-1-什么是Spring-Boot？&quot;&gt;&lt;a href=&quot;#1-1-什么是Spring-Boot？&quot; class=&quot;headerlink&quot; title=&quot;1.1 什么是Spring Boot？&quot;&gt;&lt;/a&gt;1.1 什么是Spring Boot？&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;Spring Boot是Spring项目中的一个子工程，与我们所熟知的Spring-framework 同属于spring的产品。&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​        官网解释翻译为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用一些固定的方式来构建生产级别的spring应用。Spring Boot 推崇约定大于配置的方式以便于你能够尽可能快速的启动并运行程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实人们把Spring Boot 称为搭建程序的`&lt;strong&gt;脚手架&lt;/strong&gt;`。其最主要作用就是帮我们快速的构建庞大的spring项目，并且尽可能的减少一切xml配置，做到开箱即用，迅速上手，让我们关注与业务而非配置。&lt;/p&gt;
&lt;h3 id=&quot;1-2-为什么学习Spring-Boot？&quot;&gt;&lt;a href=&quot;#1-2-为什么学习Spring-Boot？&quot; class=&quot;headerlink&quot; title=&quot;1.2 为什么学习Spring Boot？&quot;&gt;&lt;/a&gt;1.2 为什么学习Spring Boot？&lt;/h3&gt;&lt;p&gt;java一直被人诟病的一点就是臃肿、麻烦。其主要原因有两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;复杂的配置&lt;/p&gt;
&lt;p&gt;项目各种配置其实是开发时的损耗， 因为在思考 Spring 特性配置和解决业务问题之间需要进行思维切换，所以写配置挤占了写应用程序逻辑的时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个是混乱的依赖管理&lt;/p&gt;
&lt;p&gt;项目的依赖管理也是件吃力不讨好的事情。决定项目里要用哪些库就已经够让人头痛的了，你还要知道这些库的哪个版本和其他库不会有冲突，这难题实在太棘手。并且，依赖管理也是一种损耗，添加依赖不是写应用程序代码。一旦选错了依赖的版本，随之而来的不兼容问题毫无疑问会是生产力杀手。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而Spring Boot让这一切成为过去！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Spring Boot 简化了基于Spring的应用开发，只需要“run”就能创建一个独立的、生产级别的Spring应用。Spring Boot为Spring平台及第三方库提供开箱即用的设置（提供默认设置，存放默认配置的包就是启动器），这样我们就可以简单的开始。多数Spring Boot应用只需要很少的Spring配置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们可以使用SpringBoot创建java应用，并使用java –jar 启动它，就能得到一个生产级别的web工程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架学习" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习第三天</title>
    <link href="http://yoursite.com/2019/12/08/Spring%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%89%E5%A4%A9/"/>
    <id>http://yoursite.com/2019/12/08/Spring%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%89%E5%A4%A9/</id>
    <published>2019-12-08T13:17:28.000Z</published>
    <updated>2020-05-11T02:58:05.122Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h2 id="一、事务管理"><a href="#一、事务管理" class="headerlink" title="一、事务管理"></a>一、事务管理</h2><h3 id="1-1-回顾事务"><a href="#1-1-回顾事务" class="headerlink" title="1.1 回顾事务"></a>1.1 回顾事务</h3><h4 id="1-1-1-什么是事务？"><a href="#1-1-1-什么是事务？" class="headerlink" title="1.1.1 什么是事务？"></a>1.1.1 什么是事务？</h4><p>​        事务：是数据库操作的最小工作单元，是作为单个逻辑工作单元执行的一系列操作；这些操作作为一个整体一起向系统提交，要么都执行、要么都不执行；事务是一组不可再分割的操作集合（工作逻辑单元）。(理解：一组业务操作ABCD，要么全部成功，要么全部不成功。)</p><h4 id="1-1-2-事务的四大特性"><a href="#1-1-2-事务的四大特性" class="headerlink" title="1.1.2 事务的四大特性"></a>1.1.2 事务的四大特性</h4><p>​        1.原子性</p><p>​        事务是数据库的逻辑工作单位，事务中包含的各操作要么都做，要么都不做 （整体）</p><p>​        2.一致性</p><p>​        事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。因此当数据库只包含成功事务提交的结果时，就说数据库处于一致性状态。如果数据库系统 运行中发生故障，有些事务尚未完成就被迫中断，这些未完成事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是 不一致的状态。 （数据的完整）</p><p>​        3.隔离性</p><p>​        一个事务的执行不能其它事务干扰。即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。  （并发）</p><p>​        4.持续性</p><p>​        也称永久性，指一个事务一旦提交，它对数据库中的数据的改变就应该是永久性的。接下来的其它操作或故障不应该对其执行结果有任何影响。（结果）</p><a id="more"></a><h4 id="1-1-3-隔离问题"><a href="#1-1-3-隔离问题" class="headerlink" title="1.1.3 隔离问题"></a>1.1.3 隔离问题</h4><ul><li><p>脏读：一个事务读到另一个事务没有提交的数据</p></li><li><p>不可重复读：一个事务读到另一个事务已提交的数据（update）</p></li><li><p>虚读(幻读)：一个事务读到另一个事务已提交的数据（insert）</p></li></ul><h4 id="1-1-4-隔离级别"><a href="#1-1-4-隔离级别" class="headerlink" title="1.1.4 隔离级别"></a>1.1.4 隔离级别</h4><ul><li><p>read uncommitted：读未提交。存在3个问题</p></li><li><p>read committed：读已提交。解决脏读，存在2个问题</p></li><li><p>repeatable read：可重复读。解决：脏读、不可重复读，存在1个问题。</p></li><li><p>serializable ：串行化。都解决，单事务。</p></li></ul><h3 id="1-2-mysql-事务操作——简单"><a href="#1-2-mysql-事务操作——简单" class="headerlink" title="1.2 mysql 事务操作——简单"></a>1.2 mysql 事务操作——简单</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ABCD 一个事务</span></span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="comment">//1 获得连接</span></span><br><span class="line">  conn = ...;</span><br><span class="line">  <span class="comment">//2 开启事务</span></span><br><span class="line">  conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">  A</span><br><span class="line">  B</span><br><span class="line">  C</span><br><span class="line">  D</span><br><span class="line">  <span class="comment">//3 提交事务</span></span><br><span class="line">  conn.commit();</span><br><span class="line">&#125; catche()&#123;</span><br><span class="line">  <span class="comment">//4 回滚事务</span></span><br><span class="line">  conn.rollback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-mysql-事务操作——Savepoint"><a href="#1-3-mysql-事务操作——Savepoint" class="headerlink" title="1.3 mysql 事务操作——Savepoint"></a>1.3 mysql 事务操作——Savepoint</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需求：AB（必须），CD（可选） </span></span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">Savepoint savepoint = <span class="keyword">null</span>;  <span class="comment">//保存点，记录操作的当前位置，之后可以回滚到指定的位置。（可以回滚一部分）</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="comment">//1 获得连接</span></span><br><span class="line">  conn = ...;</span><br><span class="line">  <span class="comment">//2 开启事务</span></span><br><span class="line">  conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">  A</span><br><span class="line">  B</span><br><span class="line">  savepoint = conn.setSavepoint();</span><br><span class="line">  C</span><br><span class="line">  D</span><br><span class="line">  <span class="comment">//3 提交事务</span></span><br><span class="line">  conn.commit();</span><br><span class="line">&#125; catche()&#123;</span><br><span class="line">  <span class="keyword">if</span>(savepoint != <span class="keyword">null</span>)&#123;   <span class="comment">//CD异常</span></span><br><span class="line">     <span class="comment">// 回滚到CD之前</span></span><br><span class="line">     conn.rollback(savepoint);</span><br><span class="line">     <span class="comment">// 提交AB</span></span><br><span class="line">     conn.commit();</span><br><span class="line">  &#125; <span class="keyword">else</span>&#123;   <span class="comment">//AB异常</span></span><br><span class="line">     <span class="comment">// 回滚AB</span></span><br><span class="line">     conn.rollback();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-事务管理介绍"><a href="#1-4-事务管理介绍" class="headerlink" title="1.4 事务管理介绍"></a>1.4 事务管理介绍</h3><h4 id="1-4-1-导入jar包"><a href="#1-4-1-导入jar包" class="headerlink" title="1.4.1 导入jar包"></a>1.4.1 导入jar包</h4><ul><li>spring-tx-4.2.4.RELEASE.jar</li></ul><h4 id="1-4-2-三个顶级接口（在org-springframework-transaction中）"><a href="#1-4-2-三个顶级接口（在org-springframework-transaction中）" class="headerlink" title="1.4.2 三个顶级接口（在org.springframework.transaction中）"></a>1.4.2 三个顶级接口（在org.springframework.transaction中）</h4><ul><li><p>PlatformTransactionManager 平台事务管理器，spring要管理事务，<span style="color:red">必须使用事务管理器</span></p><p> ​        进行事务配置时，必须<strong>配置事务管理器</strong>。</p></li><li><p>TransactionDefinition：事务详情（事务定义、事务属性），spring用于确定事务具体详情，</p><p>​        例如：隔离级别、是否只读、超时时间等</p></li></ul><p>​    进行事务配置时，<strong>必须配置详情</strong>。spring将配置项封装到该对象实例。</p><ul><li><p>TransactionStatus：事务状态，spring用于记录当前事务运行状态。例如：是否有保存点，事务是否完成。</p><p>​        spring底层根据状态进行相应操作。</p></li></ul><h4 id="1-4-3-PlatformTransactionManager事务管理器"><a href="#1-4-3-PlatformTransactionManager事务管理器" class="headerlink" title="1.4.3 PlatformTransactionManager事务管理器"></a>1.4.3 PlatformTransactionManager事务管理器</h4><ul><li>导入jar包：需要时平台事务管理器的实现类</li></ul><p><img src="http://q1o3t6lvp.bkt.clouddn.com/%E5%B9%B3%E5%8F%B0%E4%BA%8B%E7%89%A9%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84jar%E5%8C%85.png" alt="没有找到"></p><ul><li><p>常见的事务管理器</p><p><span style="color:red"><strong>DataSourceTransactionManager，jdbc开发时事务管理器，采用JdbcTemplate</strong></span></p><p><span style="color:red"><strong>HibernateTransactionManager，hibernate开发时事务管理器，整合hibernate</strong></span></p></li></ul><p><img src="http://q1o3t6lvp.bkt.clouddn.com/%E5%B8%B8%E8%A7%81%E7%9A%84%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8.png" alt="没有找到"></p><ul><li><p>api 详解</p><p>TransactionStatus getTransaction(TransactionDefinition definition) ，事务管理器 通过“事务详情”，获得“事务状态”，从而管理事务。</p><p>void commit(TransactionStatus status) 根据状态提交</p><p>void rollback(TransactionStatus status) 根据状态回滚</p></li></ul><h4 id="1-4-4-TransactionStatus"><a href="#1-4-4-TransactionStatus" class="headerlink" title="1.4.4 TransactionStatus"></a>1.4.4 TransactionStatus</h4><p><img src="http://q1o3t6lvp.bkt.clouddn.com/%E4%BA%8B%E5%8A%A1%E7%8A%B6%E6%80%81.png" alt="没有找到"></p><h4 id="1-4-5-TransactionDefinition"><a href="#1-4-5-TransactionDefinition" class="headerlink" title="1.4.5 TransactionDefinition"></a>1.4.5 TransactionDefinition</h4><p><img src="http://q1o3t6lvp.bkt.clouddn.com/%E4%BA%8B%E5%8A%A1%E8%AF%A6%E6%83%85.png" alt="没有找到"></p><ul><li>传播行为：在两个业务之间如何共享事务。</li></ul><p>PROPAGATION_REQUIRED , required , 必须 【默认值】</p><p>​    支持当前事务，A如果有事务，B将使用该事务。</p><p>​    如果A没有事务，B将创建一个新的事务。</p><p>PROPAGATION_SUPPORTS ，supports ，支持</p><p>​    支持当前事务，A如果有事务，B将使用该事务。</p><p>​    如果A没有事务，B将以非事务执行。</p><p>PROPAGATION_MANDATORY，mandatory ，强制</p><p>​    支持当前事务，A如果有事务，B将使用该事务。</p><p>​    如果A没有事务，B将抛异常。</p><p>PROPAGATION_REQUIRES_NEW ， requires_new ，必须新的</p><p>​    如果A有事务，将A的事务挂起，B创建一个新的事务</p><p>​    如果A没有事务，B创建一个新的事务</p><p>PROPAGATION_NOT_SUPPORTED ，not_supported ,不支持</p><p>​    如果A有事务，将A的事务挂起，B将以非事务执行</p><p>​    如果A没有事务，B将以非事务执行</p><p>PROPAGATION_NEVER ，never，从不</p><p>​    如果A有事务，B将抛异常</p><p>​    如果A没有事务，B将以非事务执行</p><p>PROPAGATION_NESTED ，nested ，嵌套</p><p>​    A和B底层采用保存点机制，形成嵌套事务。</p><p><span style="color:red">掌握：PROPAGATION_REQUIRED、PROPAGATION_REQUIRES_NEW、PROPAGATION_NESTED</span></p><h3 id="1-5-案例：转账"><a href="#1-5-案例：转账" class="headerlink" title="1.5 案例：转账"></a>1.5 案例：转账</h3><h4 id="1-5-1-搭建环境"><a href="#1-5-1-搭建环境" class="headerlink" title="1.5.1 搭建环境"></a>1.5.1 搭建环境</h4><h5 id="1-5-1-1-创建表"><a href="#1-5-1-1-创建表" class="headerlink" title="1.5.1.1 创建表"></a>1.5.1.1 创建表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create database ee19_spring_day03;</span><br><span class="line">use ee19_spring_day03;</span><br><span class="line">create table account(</span><br><span class="line">  id int primary key auto_increment,</span><br><span class="line">  username varchar(50),</span><br><span class="line">  money int</span><br><span class="line">);</span><br><span class="line">insert into account(username,money) values(&#39;jack&#39;,&#39;10000&#39;);</span><br><span class="line">insert into account(username,money) values(&#39;rose&#39;,&#39;10000&#39;);</span><br></pre></td></tr></table></figure><h5 id="1-5-1-2-导入jar包"><a href="#1-5-1-2-导入jar包" class="headerlink" title="1.5.1.2 导入jar包"></a>1.5.1.2 导入jar包</h5><ul><li>核心：4+1</li><li>aop ： 4 (aop联盟、spring aop、aspectj规范、spring aspect)</li><li>数据库：2 （jdbc/tx）</li><li>驱动：mysql</li><li>连接池：c3p0</li></ul><h5 id="1-5-1-3-dao层"><a href="#1-5-1-3-dao层" class="headerlink" title="1.5.1.3 dao层"></a>1.5.1.3 dao层</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(String outer, Integer money)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.getJdbcTemplate().update(<span class="string">"update account set money = money - ? where username = ?"</span>, money,outer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(String inner, Integer money)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.getJdbcTemplate().update(<span class="string">"update account set money = money + ? where username = ?"</span>, money,inner);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-5-1-5-service层"><a href="#1-5-1-5-service层" class="headerlink" title="1.5.1.5 service层"></a>1.5.1.5 service层</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String outer, String inner, Integer money)</span> </span>&#123;</span><br><span class="line">accountDao.out(outer, money);</span><br><span class="line"><span class="comment">//断电</span></span><br><span class="line"><span class="comment">//int i = 1/0;</span></span><br><span class="line">accountDao.in(inner, money);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-5-1-6-Spring配置"><a href="#1-5-1-6-Spring配置" class="headerlink" title="1.5.1.6 Spring配置"></a>1.5.1.6 Spring配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 1 datasource --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ee19_spring_day03"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"873383099"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2 dao  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.dao.impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3 service --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="1-5-1-7-测试"><a href="#1-5-1-7-测试" class="headerlink" title="1.5.1.7 测试"></a>1.5.1.7 测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo01</span><span class="params">()</span></span>&#123;</span><br><span class="line">String xmlPath = <span class="string">"applicationContext.xml"</span>;</span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(xmlPath);</span><br><span class="line">AccountService accountService =  (AccountService) applicationContext.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">accountService.transfer(<span class="string">"jack"</span>, <span class="string">"rose"</span>, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-5-2-手动管理事务（了解）"><a href="#1-5-2-手动管理事务（了解）" class="headerlink" title="1.5.2 手动管理事务（了解）"></a>1.5.2 手动管理事务（了解）</h4><ul><li><p>spring底层使用 TransactionTemplate 事务模板进行操作。</p></li><li><p>操作</p><p>1.service 需要获得 TransactionTemplate </p><p>2.spring 配置模板，并注入给service</p><p>3.模板需要注入事务管理器</p><p>4.配置事务管理器：，需要注入</p></li></ul><h5 id="1-5-2-1-Dao类"><a href="#1-5-2-1-Dao类" class="headerlink" title="1.5.2.1 Dao类"></a>1.5.2.1 Dao类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(String outer, Integer money)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.getJdbcTemplate().update(<span class="string">"update account set money = money - ? where username = ?"</span>, money,outer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(String inner, Integer money)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.getJdbcTemplate().update(<span class="string">"update account set money = money + ? where username = ?"</span>, money,inner);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-5-2-2-修改service"><a href="#1-5-2-2-修改service" class="headerlink" title="1.5.2.2 修改service"></a>1.5.2.2 修改service</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.transaction.TransactionStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.support.TransactionCallbackWithoutResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.support.TransactionTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.springlearning.dao.AccountDao;</span><br><span class="line"><span class="keyword">import</span> com.springlearning.service.AccountService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要spring注入模板</span></span><br><span class="line"><span class="keyword">private</span> TransactionTemplate transactionTemplate;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTransactionTemplate</span><span class="params">(TransactionTemplate transactionTemplate)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.transactionTemplate = transactionTemplate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(<span class="keyword">final</span> String outer,<span class="keyword">final</span> String inner,<span class="keyword">final</span> Integer money)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">transactionTemplate.execute(<span class="keyword">new</span> TransactionCallbackWithoutResult()&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doInTransactionWithoutResult</span><span class="params">(TransactionStatus arg0)</span></span>&#123;</span><br><span class="line">accountDao.out(outer, money);</span><br><span class="line"><span class="comment">//断电</span></span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">accountDao.in(inner, money);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-5-2-3-修改Spring-配置"><a href="#1-5-2-3-修改Spring-配置" class="headerlink" title="1.5.2.3 修改Spring 配置"></a>1.5.2.3 修改Spring 配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1 datasource --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ee19_spring_day03"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"873383099"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2 dao  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.dao.impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3 service --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionTemplate"</span> <span class="attr">ref</span>=<span class="string">"transactionTemplate"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 创建模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.support.TransactionTemplate"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"txManager"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置事务管理器 ,管理器需要事务，事务从Connection获得，连接从连接池DataSource获得 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="1-5-2-4-测试"><a href="#1-5-2-4-测试" class="headerlink" title="1.5.2.4 测试"></a>1.5.2.4 测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo01</span><span class="params">()</span></span>&#123;</span><br><span class="line">String xmlPath = <span class="string">"applicationContext.xml"</span>;</span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(xmlPath);</span><br><span class="line">AccountService accountService = (AccountService) applicationContext.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">accountService.transfer(<span class="string">"jack"</span>, <span class="string">"rose"</span>, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-5-3-工厂bean-生成代理：半自动"><a href="#1-5-3-工厂bean-生成代理：半自动" class="headerlink" title="1.5.3 工厂bean 生成代理：半自动"></a>1.5.3 工厂bean 生成代理：半自动</h4><ul><li><p>spring提供 管理事务的代理工厂bean TransactionProxyFactoryBean</p><p>1.getBean() 获得代理对象</p><p>2.spring 配置一个代理</p></li></ul><h5 id="1-5-3-1-Dao类"><a href="#1-5-3-1-Dao类" class="headerlink" title="1.5.3.1 Dao类"></a>1.5.3.1 Dao类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.support.JdbcDaoSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImple</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(String outer, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.getJdbcTemplate().update(<span class="string">"update account set money = money - ? where name = ?"</span>,money,outer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(String inner, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.getJdbcTemplate().update(<span class="string">"update account set money = money + ? where name = ?"</span>, money,inner);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-5-3-2-Service-类"><a href="#1-5-3-2-Service-类" class="headerlink" title="1.5.3.2 Service 类"></a>1.5.3.2 Service 类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String outer, String inner, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">accountDao.out(outer, money);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">accountDao.in(inner, money);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-5-3-3-Spring-配制"><a href="#1-5-3-3-Spring-配制" class="headerlink" title="1.5.3.3 Spring 配制"></a>1.5.3.3 Spring 配制</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 1 datasource --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ee19_spring_day03"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"873383099"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2 dao  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.dao.impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3 service --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 4 service 代理对象 </span></span><br><span class="line"><span class="comment">4.1 proxyInterfaces 接口 </span></span><br><span class="line"><span class="comment">4.2 target 目标类</span></span><br><span class="line"><span class="comment">4.3 transactionManager 事务管理器</span></span><br><span class="line"><span class="comment">4.4 transactionAttributes 事务属性（事务详情）</span></span><br><span class="line"><span class="comment">prop.key ：确定哪些方法使用当前事务配置</span></span><br><span class="line"><span class="comment">prop.text:用于配置事务详情</span></span><br><span class="line"><span class="comment">格式：PROPAGATION,ISOLATION,readOnly,-Exception,+Exception</span></span><br><span class="line"><span class="comment">传播行为   隔离级别是否只读   异常回滚  异常提交</span></span><br><span class="line"><span class="comment">例如：</span></span><br><span class="line"><span class="comment">&lt;prop key="transfer"&gt;PROPAGATION_REQUIRED,ISOLATION_DEFAULT&lt;/prop&gt; 默认传播行为，和隔离级别</span></span><br><span class="line"><span class="comment">&lt;prop key="transfer"&gt;PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly&lt;/prop&gt; 只读</span></span><br><span class="line"><span class="comment">&lt;prop key="transfer"&gt;PROPAGATION_REQUIRED,ISOLATION_DEFAULT,+java.lang.ArithmeticException&lt;/prop&gt;  有异常扔提交 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"proxyAccountService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.interceptor.TransactionProxyFactoryBean"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proxyInterfaces"</span> <span class="attr">value</span>=<span class="string">"com.springlearning.service.AccountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">ref</span>=<span class="string">"accountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"txManager"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionAttributes"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"transfer"</span>&gt;</span>PROPAGATION_REQUIRED,ISOLATION_DEFAULT<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 5 配置事务管理器 ,管理器需要事务，事务从Connection获得，连接从连接池DataSource获得 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="1-5-3-4-测试"><a href="#1-5-3-4-测试" class="headerlink" title="1.5.3.4 测试"></a>1.5.3.4 测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo01</span><span class="params">()</span></span>&#123;</span><br><span class="line">String xmlPath = <span class="string">"applicationContext.xml"</span>;</span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(xmlPath);</span><br><span class="line">AccountService accountService = (AccountService) applicationContext.getBean(<span class="string">"proxyAccountService"</span>);</span><br><span class="line">accountService.transfer(<span class="string">"jack"</span>, <span class="string">"rose"</span>, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-5-4-AOP-配置基于xml【掌握】"><a href="#1-5-4-AOP-配置基于xml【掌握】" class="headerlink" title="1.5.4 AOP 配置基于xml【掌握】"></a>1.5.4 AOP 配置基于xml【掌握】</h4><ul><li><p>在spring xml 配置aop 自动生成代理，进行事务的管理</p><p>1.配置管理器</p><p>2.配置事务详情</p><p>3.配置aop</p></li></ul><h5 id="1-5-4-1-Dao"><a href="#1-5-4-1-Dao" class="headerlink" title="1.5.4.1 Dao"></a>1.5.4.1 Dao</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.support.JdbcDaoSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImple</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(String outer, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.getJdbcTemplate().update(<span class="string">"update account set money = money - ? where name = ?"</span>,money,outer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(String inner, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.getJdbcTemplate().update(<span class="string">"update account set money = money + ? where name = ?"</span>, money,inner);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-5-4-2-Service"><a href="#1-5-4-2-Service" class="headerlink" title="1.5.4.2 Service"></a>1.5.4.2 Service</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String outer, String inner, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">accountDao.out(outer, money);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">accountDao.in(inner, money);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-5-4-3-Spring-配置文件"><a href="#1-5-4-3-Spring-配置文件" class="headerlink" title="1.5.4.3 Spring 配置文件"></a>1.5.4.3 Spring 配置文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 1 datasource --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ee19_spring_day03"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"873383099"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2 dao  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.dao.impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3 service --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4 事务管理 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 4.1 事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置 事务详情（事务通知）  ， 在aop筛选基础上，对ABC三个确定使用什么样的事务。例如：AC读写、B只读 等</span></span><br><span class="line"><span class="comment">&lt;tx:attributes&gt; 用于配置事务详情（属性属性）</span></span><br><span class="line"><span class="comment">&lt;tx:method name=""/&gt; 详情具体配置</span></span><br><span class="line"><span class="comment">propagation 传播行为 ， REQUIRED：必须；REQUIRES_NEW:必须是新的</span></span><br><span class="line"><span class="comment">isolation 隔离级别 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"transfer"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">isolation</span>=<span class="string">"DEFAULT"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 4.3 AOP编程，目标类有ABCD（4个连接点），切入点表达式 确定增强的连接器，从而获得切入点：ABC --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* com.springlearning.service..*.*(..))"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="1-5-4-4-测试"><a href="#1-5-4-4-测试" class="headerlink" title="1.5.4.4 测试"></a>1.5.4.4 测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo01</span><span class="params">()</span></span>&#123;</span><br><span class="line">String xmlPath = <span class="string">"applicationContext.xml"</span>;</span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(xmlPath);</span><br><span class="line">AccountService accountService = (AccountService) applicationContext.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">accountService.transfer(<span class="string">"jack"</span>, <span class="string">"rose"</span>, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-5-5-AOP配置基于注解【掌握】"><a href="#1-5-5-AOP配置基于注解【掌握】" class="headerlink" title="1.5.5 AOP配置基于注解【掌握】"></a>1.5.5 AOP配置基于注解【掌握】</h4><ul><li><p>1.配置事务管理器，将并事务管理器交予spring</p></li><li><p>2.在目标类或目标方法添加注解即可 @Transactional</p></li></ul><h5 id="1-5-5-1-Service层"><a href="#1-5-5-1-Service层" class="headerlink" title="1.5.5.1 Service层"></a>1.5.5.1 Service层</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation=Propagation.REQUIRED,isolation=Isolation.DEFAULT)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String outer, String inner, Integer money)</span> </span>&#123;</span><br><span class="line">accountDao.out(outer, money);</span><br><span class="line"><span class="comment">//断电</span></span><br><span class="line"><span class="comment">//int i=1/0; </span></span><br><span class="line">accountDao.in(inner, money);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-5-5-2-Spring-配置"><a href="#1-5-5-2-Spring-配置" class="headerlink" title="1.5.5.2 Spring 配置"></a>1.5.5.2 Spring 配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1 datasource --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ee19_spring_day03"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"873383099"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2 dao  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.dao.impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3 service --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4 事务管理 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 4.1 事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 4.2 将管理器交于spring </span></span><br><span class="line"><span class="comment">         *transaction-manager 配置事物管理器</span></span><br><span class="line"><span class="comment">         *proxy-target-class="true" 底层强制使用cglib代理</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、整合-Junit"><a href="#二、整合-Junit" class="headerlink" title="二、整合 Junit"></a>二、整合 Junit</h2><ul><li><p>导入jar包</p><p>​    基本 ：4+1 </p><p>​    测试：spring-test…jar</p></li></ul><p>1.让Junit通知spring加载配置文件</p><p>2.让spring容器自动进行注入</p><ul><li>修改测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.springlearning.service.AccountService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span></span>=<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span>    <span class="comment">//与Junit整合，不需要在spring xml中配置扫描</span></span><br><span class="line"><span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo01</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//String xmlPath = "applicationContext.xml";</span></span><br><span class="line"><span class="comment">//ApplicationContext applicationContext = new ClassPathXmlApplicationContext(xmlPath);</span></span><br><span class="line"><span class="comment">//AccountService accountService = (AccountService) applicationContext.getBean("accountService");</span></span><br><span class="line">accountService.transfer(<span class="string">"jack"</span>, <span class="string">"rose"</span>, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><h3 id="3-1-事务管理"><a href="#3-1-事务管理" class="headerlink" title="3.1 事务管理"></a>3.1 事务管理</h3><ul><li>基于 xml 配置</li></ul><p>1.配置事务管理器</p><p> <code>jdbc：DataSourceTransactionManager</code></p><p> <code>hibernate：HibernateTransactionManager</code></p><p>2.事务通知（详情、属性）</p><p><code>&lt;tx:advice id=&quot;&quot; transaction-manager=&quot;&quot;&gt;</code></p><p><code>&lt;tx:attributes&gt;</code></p><p>   <code>&lt;tx:method name=&quot;add*&quot;&gt;</code></p><p>   <code>&lt;tx:method name=&quot;update*&quot;&gt;</code></p><p>   <code>&lt;tx:method name=&quot;delete*&quot;&gt;</code></p><p>   <code>&lt;tx:method name=&quot;find* read-only=&quot;true&quot;&gt;</code></p><p> 3.AOP编程，ABCD–&gt; ABC</p><p><code>&lt;aop:config&gt;</code></p><p><code>&lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut=&quot;execution(* com..*.*(..))&quot;&gt;</code></p><ul><li><p>基于注解</p><p>xml 配置 </p></li></ul><p>1.事务管理器   </p><p>2.将配置事务管理器交予spring  &lt;tx:annotation-driven transaction-manager=”….”&gt;   </p><p>​     目标类</p><p>  @Transactional  类 | 方法  </p><h3 id="3-2-整合-Junit"><a href="#3-2-整合-Junit" class="headerlink" title="3.2 整合 Junit"></a>3.2 整合 Junit</h3><p>@RunWith(SpringJunit4RnnerClass.class)</p><p>@ContextConfiguration(locations=”classpath:…xml”)</p><p>@Autowired 注入</p><p>@Test 测试</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;一、事务管理&quot;&gt;&lt;a href=&quot;#一、事务管理&quot; class=&quot;headerlink&quot; title=&quot;一、事务管理&quot;&gt;&lt;/a&gt;一、事务管理&lt;/h2&gt;&lt;h3 id=&quot;1-1-回顾事务&quot;&gt;&lt;a href=&quot;#1-1-回顾事务&quot; class=&quot;headerlink&quot; title=&quot;1.1 回顾事务&quot;&gt;&lt;/a&gt;1.1 回顾事务&lt;/h3&gt;&lt;h4 id=&quot;1-1-1-什么是事务？&quot;&gt;&lt;a href=&quot;#1-1-1-什么是事务？&quot; class=&quot;headerlink&quot; title=&quot;1.1.1 什么是事务？&quot;&gt;&lt;/a&gt;1.1.1 什么是事务？&lt;/h4&gt;&lt;p&gt;​        事务：是数据库操作的最小工作单元，是作为单个逻辑工作单元执行的一系列操作；这些操作作为一个整体一起向系统提交，要么都执行、要么都不执行；事务是一组不可再分割的操作集合（工作逻辑单元）。(理解：一组业务操作ABCD，要么全部成功，要么全部不成功。)&lt;/p&gt;
&lt;h4 id=&quot;1-1-2-事务的四大特性&quot;&gt;&lt;a href=&quot;#1-1-2-事务的四大特性&quot; class=&quot;headerlink&quot; title=&quot;1.1.2 事务的四大特性&quot;&gt;&lt;/a&gt;1.1.2 事务的四大特性&lt;/h4&gt;&lt;p&gt;​        1.原子性&lt;/p&gt;
&lt;p&gt;​        事务是数据库的逻辑工作单位，事务中包含的各操作要么都做，要么都不做 （整体）&lt;/p&gt;
&lt;p&gt;​        2.一致性&lt;/p&gt;
&lt;p&gt;​        事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。因此当数据库只包含成功事务提交的结果时，就说数据库处于一致性状态。如果数据库系统 运行中发生故障，有些事务尚未完成就被迫中断，这些未完成事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是 不一致的状态。 （数据的完整）&lt;/p&gt;
&lt;p&gt;​        3.隔离性&lt;/p&gt;
&lt;p&gt;​        一个事务的执行不能其它事务干扰。即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。  （并发）&lt;/p&gt;
&lt;p&gt;​        4.持续性&lt;/p&gt;
&lt;p&gt;​        也称永久性，指一个事务一旦提交，它对数据库中的数据的改变就应该是永久性的。接下来的其它操作或故障不应该对其执行结果有任何影响。（结果）&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架学习" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习第二天</title>
    <link href="http://yoursite.com/2019/12/02/Spring%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
    <id>http://yoursite.com/2019/12/02/Spring%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%8C%E5%A4%A9/</id>
    <published>2019-12-02T12:29:12.000Z</published>
    <updated>2020-05-11T02:57:54.454Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h2 id="一、AOP"><a href="#一、AOP" class="headerlink" title="一、AOP"></a>一、AOP</h2><h3 id="1-1-AOP-介绍"><a href="#1-1-AOP-介绍" class="headerlink" title="1.1 AOP 介绍"></a>1.1 AOP 介绍</h3><h4 id="1-1-1-什么是AOP？"><a href="#1-1-1-什么是AOP？" class="headerlink" title="1.1.1 什么是AOP？"></a>1.1.1 什么是AOP？</h4><ul><li>在软件业，AOP为Aspect Oriented Programming的缩写，意为：<span style="color:red">面向切面编程</span>，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP（面向对象编程）的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<span style="color:red">耦合度降低</span>，提高程序的<span style="color:red">可重用性</span>，同时提高了开发的效率。</li><li>AOP采取<strong>横向抽取</strong>机制，取代了传统<strong>纵向继承</strong>体系重复性代码</li><li>经典应用：事务管理、性能监视、安全检查、缓存 、日志等</li><li>Spring AOP使用纯Java实现，不需要专门的编译过程和类加载器，在运行期通过代理方式向目标类织入增强代码</li><li>AspectJ是一个基于Java语言的<strong>AOP框架</strong>，Spring2.0开始，Spring AOP引入对Aspect的支持，AspectJ扩展了Java语言，提供了一个专门的编译器，在编译时提供横向代码的织入  </li></ul><h4 id="1-1-2-AOP实现原理"><a href="#1-1-2-AOP实现原理" class="headerlink" title="1.1.2 AOP实现原理"></a>1.1.2 AOP实现原理</h4><ul><li>aop底层将采用代理机制进行实现。</li><li>接口 + 实现类：spring采用 jdk 的<span style="color:red">动态代理</span>Proxy。</li><li>实现类：spring 采用<span style="color:red"> cglib字节码增强</span>。</li></ul><a id="more"></a><h4 id="1-1-3-AOP术语【掌握】"><a href="#1-1-3-AOP术语【掌握】" class="headerlink" title="1.1.3 AOP术语【掌握】"></a>1.1.3 AOP术语【掌握】</h4><p>1.target目标类：需要被代理的类。例如：UserService</p><p>2.Joinpoint连接点：所谓连接点是指那些可能被拦截到的方法。例如：所有的方法</p><p>3.PointCut切入点：已经被增强的连接点。例如：addUser()</p><p>4.advice通知/增强，增强代码。例如：after、before</p><p>5.Weaving织入：是指把增强advice应用到目标对象target来创建新的代理对象proxy的过程.</p><p>6.proxy代理类</p><p>7.Aspect切面：是切入点pointcut和通知advice的结合</p><p>​        一个线是一个特殊的面。</p><p>​        一个切入点和一个通知，组成成一个特殊的面。</p><p><img src="http://q1o3t6lvp.bkt.clouddn.com/aop%E6%9C%AF%E8%AF%AD.jpg" alt="没有找到"></p><h3 id="1-2-手动方式"><a href="#1-2-手动方式" class="headerlink" title="1.2 手动方式"></a>1.2 手动方式</h3><h4 id="1-2-1-JDK动态代理"><a href="#1-2-1-JDK动态代理" class="headerlink" title="1.2.1 JDK动态代理"></a>1.2.1 JDK动态代理</h4><ul><li><p>JDK动态代理 对“装饰者”设计模式 简化。使用前提：必须有接口</p><p>1.目标类：接口 + 实现类</p><p>2.切面类：用于存通知 MyAspect</p><p>3.工厂类：编写工厂生成代理</p><p>4.测试</p></li></ul><h5 id="1-2-1-1-目标类（接口-实现类）"><a href="#1-2-1-1-目标类（接口-实现类）" class="headerlink" title="1.2.1.1 目标类（接口+实现类）"></a>1.2.1.1 目标类（接口+实现类）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*接口*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*实现类*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"a_proxy.a_jdk addUser"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"a_proxy.a_jdk updateUser"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"a_proxy.a_jdk deleteUser"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-1-2-切面类"><a href="#1-2-1-2-切面类" class="headerlink" title="1.2.1.2 切面类"></a>1.2.1.2 切面类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"鸡首"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"牛太郎"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-1-3-工厂"><a href="#1-2-1-3-工厂" class="headerlink" title="1.2.1.3 工厂"></a>1.2.1.3 工厂</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserService <span class="title">createService</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1 目标类</span></span><br><span class="line"><span class="keyword">final</span> UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2切面类</span></span><br><span class="line"><span class="keyword">final</span> MyAspect myAspect = <span class="keyword">new</span> MyAspect();</span><br><span class="line"><span class="comment">/* 3 代理类：将目标类（切入点）和 切面类（通知） 结合 --&gt; 切面</span></span><br><span class="line"><span class="comment"> * Proxy.newProxyInstance(loader,interfaces,h)</span></span><br><span class="line"><span class="comment"> * 参数1：loader ，类加载器，动态代理类 运行时创建，任何类都需要类加载器将其加载到内存。</span></span><br><span class="line"><span class="comment"> * 一般情况：当前类.class.getClassLoader();</span></span><br><span class="line"><span class="comment"> * 目标类实例.getClass().get...</span></span><br><span class="line"><span class="comment"> * 参数2：Class[] interfaces 代理类需要实现的所有接口们</span></span><br><span class="line"><span class="comment"> * 方式1：目标类实例.getClass().getInterfaces()  ;注意：只能获得自己接口，不能获得父元素接口</span></span><br><span class="line"><span class="comment"> * 方式2：new Class[]&#123;UserService.class&#125;   </span></span><br><span class="line"><span class="comment"> * 例如：jdbc 驱动  --&gt; DriverManager  获得接口 Connection</span></span><br><span class="line"><span class="comment"> * 参数3：InvocationHandler  处理类，接口，必须进行实现类，一般采用匿名内部</span></span><br><span class="line"><span class="comment"> * 提供 invoke 方法，代理类的每一个方法执行时，都将调用一次invoke</span></span><br><span class="line"><span class="comment"> * 参数31：Object proxy ：代理对象</span></span><br><span class="line"><span class="comment"> * 参数32：Method method : 代理对象当前执行的方法的描述对象（反射）</span></span><br><span class="line"><span class="comment"> * 执行方法名：method.getName()</span></span><br><span class="line"><span class="comment"> * 执行方法：method.invoke(对象，实际参数)</span></span><br><span class="line"><span class="comment"> * 参数33：Object[] args :方法实际参数</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">UserService proxService = (UserService)Proxy.newProxyInstance(</span><br><span class="line">MyBeanFactory<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>(), </span></span><br><span class="line"><span class="class"><span class="title">userService</span>.<span class="title">getClass</span>().<span class="title">getInterfaces</span>(), </span></span><br><span class="line"><span class="class"><span class="title">new</span> <span class="title">InvocationHandler</span>() </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前执行</span></span><br><span class="line">myAspect.before();</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行目标类的方法</span></span><br><span class="line">Object obj = method.invoke(userService, args);</span><br><span class="line"></span><br><span class="line"><span class="comment">//后执行</span></span><br><span class="line">myAspect.after();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> proxService;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-1-4-测试"><a href="#1-2-1-4-测试" class="headerlink" title="1.2.1.4 测试"></a>1.2.1.4 测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo01</span><span class="params">()</span></span>&#123;</span><br><span class="line">UserService userService = MyBeanFactory.createService();</span><br><span class="line">userService.addUser();</span><br><span class="line">userService.updateUser();</span><br><span class="line">userService.deleteUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-2-CGLIB字节码增强"><a href="#1-2-2-CGLIB字节码增强" class="headerlink" title="1.2.2 CGLIB字节码增强"></a>1.2.2 CGLIB字节码增强</h4><ul><li><p>没有接口，只有实现类。</p></li><li><p>采用字节码增强框架cglib，在运行时创建目标类的子类，从而对目标类进行增强。</p></li><li><p>导入jar包：</p><p>自己导包（了解）：</p><p>​       核心：hibernate-distribution-3.6.10.Final\lib\bytecode\cglib\cglib-2.2.jar</p><p>​       依赖：struts-2.3.15.3\apps\struts2-blank\WEB-INF\lib\asm-3.3.jar</p><p>​    spring-core..jar 已经整合以上两个内容</p></li></ul><h5 id="1-2-2-1-工厂类（目标类与JDK动态代理一样，只是没有接口，测试也是一样）"><a href="#1-2-2-1-工厂类（目标类与JDK动态代理一样，只是没有接口，测试也是一样）" class="headerlink" title="1.2.2.1 工厂类（目标类与JDK动态代理一样，只是没有接口，测试也是一样）"></a>1.2.2.1 工厂类（目标类与JDK动态代理一样，只是没有接口，测试也是一样）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserServiceImpl <span class="title">createService</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1 目标类</span></span><br><span class="line"><span class="keyword">final</span> UserServiceImpl userServiceImpl = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2切面类</span></span><br><span class="line"><span class="keyword">final</span> MyAspect myAspect = <span class="keyword">new</span> MyAspect();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.代理类 ，采用cglib，底层创建目标类的子类</span></span><br><span class="line"><span class="comment">//3.1 核心类</span></span><br><span class="line">Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line"><span class="comment">//3.2 确定父类</span></span><br><span class="line">enhancer.setSuperclass(userServiceImpl.getClass());</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3.3 设置回调函数 , MethodInterceptor接口 等效 jdk InvocationHandler接口</span></span><br><span class="line"><span class="comment"> * intercept() 等效 jdk  invoke()</span></span><br><span class="line"><span class="comment"> * 参数1、参数2、参数3：与invoke一样</span></span><br><span class="line"><span class="comment"> * 参数4：methodProxy 方法的代理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor()&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前</span></span><br><span class="line">myAspect.before();</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行目标类的方法</span></span><br><span class="line">Object obj = method.invoke(userServiceImpl, args);</span><br><span class="line"><span class="comment">//执行代理类的父类 ，执行目标类 （目标类和代理类 父子关系）</span></span><br><span class="line">methodProxy.invokeSuper(proxy, args); </span><br><span class="line"></span><br><span class="line"><span class="comment">//后</span></span><br><span class="line">myAspect.after();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//3.4 创建代理</span></span><br><span class="line">UserServiceImpl proxService = (UserServiceImpl) enhancer.create();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> proxService;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-AOP联盟通知类型"><a href="#1-3-AOP联盟通知类型" class="headerlink" title="1.3 AOP联盟通知类型"></a>1.3 AOP联盟通知类型</h3><ul><li><p>AOP联盟为通知Advice定义了org.aopalliance.aop.Advice</p></li><li><p>Spring按照通知Advice在目标类方法的连接点位置，可以分为5类</p><ul><li><p>前置通知 org.springframework.aop.MethodBeforeAdvice</p><ul><li>在目标方法执行前实施增强(可阻碍目标方法的执行)</li></ul></li><li><p>后置通知 org.springframework.aop.AfterReturningAdvice</p><ul><li>在目标方法执行后实施增强(可获取目标方法的返回值)</li></ul></li><li><p><span style="color:red">环绕通知</span> org.aopalliance.intercept.MethodInterceptor</p><ul><li>在目标方法执行前后实施增强</li></ul></li><li><p>异常抛出通知 org.springframework.aop.ThrowsAdvice</p><ul><li>在方法抛出异常后实施增强</li></ul></li><li><p>引介通知 org.springframework.aop.IntroductionInterceptor</p><ul><li>在目标类中添加一些新的方法和属性 </li></ul></li></ul></li><li><p><strong>整体概括</strong></p><p>环绕通知，<span style="color:red">必须手动执行目标方法</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">     <span class="comment">//前置通知</span></span><br><span class="line"></span><br><span class="line">  ​  <span class="comment">//执行目标方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//后置通知</span></span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">catch</span>()&#123;</span><br><span class="line">  <span class="comment">//抛出异常通知</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-Spring-编写代理：半自动化"><a href="#1-4-Spring-编写代理：半自动化" class="headerlink" title="1.4 Spring 编写代理：半自动化"></a>1.4 Spring 编写代理：半自动化</h3></li><li><p>让Spring 创建代理对象，从Spring容器中手动的获取代理对象</p></li><li><p>导入jar包</p></li></ul><p>核心：4+1</p><p>AOP：AOP联盟（规范）、Spring-aop （实现）  </p><h4 id="1-4-1-目标类"><a href="#1-4-1-目标类" class="headerlink" title="1.4.1 目标类"></a>1.4.1 目标类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-2-切面类"><a href="#1-4-2-切面类" class="headerlink" title="1.4.2  切面类"></a>1.4.2  切面类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面类中确定通知，需要实现不同接口，接口就是规范，从而就确定方法名称。</span></span><br><span class="line"><span class="comment"> * * 采用“环绕通知” MethodInterceptor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation mi)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"前3"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//手动执行目标方法</span></span><br><span class="line">Object obj = mi.proceed();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"后3"</span>);</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-3-Spring配置"><a href="#1-4-3-Spring配置" class="headerlink" title="1.4.3 Spring配置"></a>1.4.3 Spring配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1 创建目标类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userServiceId"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.b_factory_bean.UserServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2 创建切面类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAspectId"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.b_factory_bean.MyAspect"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3 创建代理类 </span></span><br><span class="line"><span class="comment">* 使用工厂bean FactoryBean ，底层调用 getObject() 返回特殊bean</span></span><br><span class="line"><span class="comment">* ProxyFactoryBean 用于创建代理工厂bean，生成特殊代理对象</span></span><br><span class="line"><span class="comment">interfaces : 确定接口们</span></span><br><span class="line"><span class="comment">通过&lt;array&gt;可以设置多个值</span></span><br><span class="line"><span class="comment">只有一个值时，value=""</span></span><br><span class="line"><span class="comment">target : 确定目标类</span></span><br><span class="line"><span class="comment">interceptorNames : 通知 切面类的名称，类型String[]，如果设置一个值 value=""</span></span><br><span class="line"><span class="comment">optimize :强制使用cglib</span></span><br><span class="line"><span class="comment">&lt;property name="optimize" value="true"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">底层机制</span></span><br><span class="line"><span class="comment">如果目标类有接口，采用jdk动态代理</span></span><br><span class="line"><span class="comment">如果没有接口，采用cglib 字节码增强</span></span><br><span class="line"><span class="comment">如果声明 optimize = true ，无论是否有接口，都采用cglib</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"proxyServiceId"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interfaces"</span> <span class="attr">value</span>=<span class="string">"com.springlearning.b_factory_bean.UserService"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">ref</span>=<span class="string">"userServiceId"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptorNames"</span> <span class="attr">value</span>=<span class="string">"myAspectId"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-4-4-测试"><a href="#1-4-4-测试" class="headerlink" title="1.4.4 测试"></a>1.4.4 测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo01</span><span class="params">()</span></span>&#123;</span><br><span class="line">String xmlPath = <span class="string">"com/springlearning/b_factory_bean/beans.xml"</span>;</span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(xmlPath);</span><br><span class="line">UserService userService = (UserService) applicationContext.getBean(<span class="string">"proxyServiceId"</span>);</span><br><span class="line">userService.addUser();</span><br><span class="line">userService.updateUser();</span><br><span class="line">userService.deleteUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-Spring-AOP编程：全自动【掌握】"><a href="#1-5-Spring-AOP编程：全自动【掌握】" class="headerlink" title="1.5 Spring AOP编程：全自动【掌握】"></a>1.5 Spring AOP编程：全自动【掌握】</h3><ul><li>从spring容器获得目标类，如果配置aop，spring将自动生成代理。</li><li>要确定目标类，aspectj 切入点表达式，导入jar包         spring-framework-3.0.2.RELEASE-dependencies\org.aspectj\com.springsource.org.aspectj.weaver\1.6.8.RELEASE  </li></ul><h4 id="1-5-1-Spring-配置"><a href="#1-5-1-Spring-配置" class="headerlink" title="1.5.1 Spring 配置"></a>1.5.1 Spring 配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">                       </span><br><span class="line">    <span class="comment">&lt;!-- 1 创建目标类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userServiceId"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.c_spring_aop.UserServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2 创建切面类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAspectId"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.c_spring_aop.MyAspect"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3 aop编程 </span></span><br><span class="line"><span class="comment">3.1 导入命名空间</span></span><br><span class="line"><span class="comment">3.2 使用 &lt;aop:config&gt;进行配置</span></span><br><span class="line"><span class="comment">proxy-target-class="true" 声明时使用cglib代理</span></span><br><span class="line"><span class="comment">&lt;aop:pointcut&gt; 切入点 ，从目标对象获得具体方法</span></span><br><span class="line"><span class="comment">&lt;aop:advisor&gt; 特殊的切面，只有一个通知 和 一个切入点</span></span><br><span class="line"><span class="comment">advice-ref 通知引用</span></span><br><span class="line"><span class="comment">pointcut-ref 切入点引用</span></span><br><span class="line"><span class="comment">3.3 切入点表达式</span></span><br><span class="line"><span class="comment">execution(* com.springlearning.c_spring_aop.*.*(..))</span></span><br><span class="line"><span class="comment">选择方法         返回值任意   包             类名任意   方法名任意   参数任意</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.springlearning.c_spring_aop.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"myPointCut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"myAspectId"</span> <span class="attr">pointcut-ref</span>=<span class="string">"myPointCut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-5-2-测试"><a href="#1-5-2-测试" class="headerlink" title="1.5.2 测试"></a>1.5.2 测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo01</span><span class="params">()</span></span>&#123;</span><br><span class="line">String xmlPath = <span class="string">"com/springlearning/c_spring_aop/beans.xml"</span>;</span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(xmlPath);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得目标类</span></span><br><span class="line">UserService userService = (UserService) applicationContext.getBean(<span class="string">"userServiceId"</span>);</span><br><span class="line">userService.addUser();</span><br><span class="line">userService.updateUser();</span><br><span class="line">userService.deleteUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、AspectJ"><a href="#二、AspectJ" class="headerlink" title="二、AspectJ"></a>二、AspectJ</h2><h3 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h3><ul><li><p>AspectJ是一个基于Java语言的<span style="color:red">AOP框架</span></p></li><li><p>Spring2.0以后新增了对AspectJ切点表达式支持</p></li><li><p>@AspectJ 是AspectJ1.5新增功能，通过JDK5注解技术，允许直接在Bean类中定义切面</p><p>新版本Spring框架，建议使用AspectJ方式来开发AOP</p></li><li><p>主要用途：自定义开发</p></li></ul><h3 id="2-2-切入点表达式【掌握】"><a href="#2-2-切入点表达式【掌握】" class="headerlink" title="2.2 切入点表达式【掌握】"></a>2.2 切入点表达式【掌握】</h3><p>1.<span style="color:red">execution() </span>用于描述方法 【掌握】</p><p>​    语法：execution(<strong>修饰符</strong> <strong>返回值</strong> <strong>包</strong>.<strong>类</strong>.<strong>方法名</strong>(<strong>参数</strong>) <strong>throws异常</strong>)</p><p>​       <strong>修饰符</strong>，一般省略</p><p>​           public      公共方法</p><p>​           *          任意</p><p>​       <strong>返回值</strong>，不能省略</p><p>​           void        返回没有值</p><p>​           String      返回值字符串</p><p>​           *         任意</p><p>​       <strong>包</strong>，[可省略]</p><p>​           com.itheima.crm         固定包</p><p>​           com.itheima.crm.*.service  crm包下面子包任意 （例如：com.itheima.crm.staff.service）</p><p>​           com.itheima.crm..        crm包下面的所有子包（含自己）</p><p>​           com.itheima.crm.*.service..  crm包下面任意子包，固定目录service，service目录任意包</p><p>​           <strong>类</strong>，[省略]</p><p>​               UserServiceImpl         指定类</p><p>​               *Impl                 以Impl结尾</p><p>​               User*                 以User开头</p><p>​               *                    任意</p><p>​           <strong>方法名</strong>，不能省略</p><p>​               addUser                固定方法</p><p>​               add*                  以add开头</p><p>​               *Do                  以Do结尾</p><p>​               *                    任意</p><p>​           <strong>(参数)</strong></p><p>​               ()                    无参</p><p>​               (int)                  一个整型</p><p>​               (int ,int)               两个</p><p>​               (..)                   参数任意</p><p>​           <strong>throws</strong> ,可省略，一般不写。</p><p>综合1</p><p>​    <span style="color:red"><strong>execution(* com.springlearning.crm.*.service..*.*(..))</strong></span></p><p>综合2</p><p>​    &lt;aop:pointcut expression=”execution(* com.springlearning.* WithCommit.*(..)) || </p><p>​                                                      execution(* com.springlearning.* Service.*(..))” id=”myPointCut”/&gt;</p><p>2.within:匹配包或子包中的方法(了解)</p><p>​    within(com.springlearning.aop..*)</p><p>3.this:匹配实现接口的代理对象中的方法(了解)</p><p>​    this(com.springlearning.aop.user.UserDAO)</p><p>4.target:匹配实现接口的目标对象中的方法(了解)</p><p>​    target(com.springlearning.aop.user.UserDAO)</p><p>5.args:匹配参数格式符合标准的方法(了解)</p><p>​    args(int,int)</p><p>6.bean(id) 对指定的bean所有的方法(了解)</p><p>​    bean(‘userServiceId’)</p><h3 id="2-3-AspectJ-通知类型"><a href="#2-3-AspectJ-通知类型" class="headerlink" title="2.3 AspectJ 通知类型"></a>2.3 AspectJ 通知类型</h3><ul><li><p>aop联盟定义通知类型，具有特性接口，必须实现，从而确定方法名称。</p></li><li><p>aspectj 通知类型，只定义类型名称。以及方法格式。</p></li><li><p>个数：6种，知道5种，掌握1中。</p><p>​    before:前置通知(应用：各种校验)</p><p>​                  在方法执行前执行，如果通知抛出异常，阻止方法运行</p><p>​    afterReturning:后置通知(应用：常规数据处理)</p></li></ul><p>​                        方法正常返回后执行，如果方法中抛出异常，通知无法执行</p><p>​                       必须在方法执行后才执行，所以可以获得方法的返回值。</p><p>​            <span style="color:red">around</span>:环绕通知(应用：十分强大，可以做任何事情)</p><p>​                       方法执行前后分别执行，可以阻止方法的执行</p><p>​                       必须手动执行目标方法</p><p>​            afterThrowing:抛出异常通知(应用：包装异常信息)</p><p>​                       方法抛出异常后执行，如果方法没有抛出异常，无法执行</p><pre><code>after:最终通知(应用：清理现场)</code></pre><p>​                       方法执行完毕后执行，无论方法中是否出现异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">环绕通知</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">     <span class="comment">//前置：before</span></span><br><span class="line">    <span class="comment">//手动执行目标方法</span></span><br><span class="line">    <span class="comment">//后置：afterRetruning</span></span><br><span class="line">&#125; <span class="keyword">catch</span>()&#123;</span><br><span class="line">    <span class="comment">//抛出异常 afterThrowing</span></span><br><span class="line">&#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">//最终 after</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-导入jar包"><a href="#2-4-导入jar包" class="headerlink" title="2.4 导入jar包"></a>2.4 导入jar包</h3><ul><li><p>4个jar包：</p><p>​    aop联盟规范 –&gt;com.springsource.org.aopaliance-1.0.0.jar</p><p>​    spring aop 实现–&gt;spring-aop-4.2.4.RELEASE.jar</p><p>​    aspect 规范–&gt;com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar</p><p>​    spring aspect 实现–&gt;spring-aspects-4.2.4.RELEASE.jar</p></li></ul><h3 id="2-5-基于XML"><a href="#2-5-基于XML" class="headerlink" title="2.5 基于XML"></a>2.5 基于XML</h3><ol><li><p>目标类：接口 + 实现</p></li><li><p>切面类：编写多个通知，采用aspectj 通知名称任意（方法名任意）</p></li><li><p>aop编程，将通知应用到目标类</p></li><li><p>测试</p></li></ol><h4 id="2-5-1-切面类"><a href="#2-5-1-切面类" class="headerlink" title="2.5.1 切面类"></a>2.5.1 切面类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面类，含有多个通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myBefore</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"前置通知与当前目标方法名称："</span>+joinPoint.getSignature().getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfterReturning</span><span class="params">(JoinPoint joinPoint,Object ret)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"后置通知与当前目标方法名称："</span>+joinPoint.getSignature().getName()+<span class="string">"，目标方法的返回值为："</span>+ret);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">myAround</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable</span>&#123;<span class="comment">//必须有参数为可执行的joinPoint</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"环绕通知的前面"</span>);</span><br><span class="line"><span class="comment">//手动执行目标方法</span></span><br><span class="line">Object obj = joinPoint.proceed();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"环绕通知的后面"</span>);</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfterThrowing</span><span class="params">(JoinPoint joinPoint,Throwable e)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"抛出异常通知："</span>+e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfter</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"最终通知！！！！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-2-Spring配置"><a href="#2-5-2-Spring配置" class="headerlink" title="2.5.2  Spring配置"></a>2.5.2  Spring配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">                       </span><br><span class="line">    <span class="comment">&lt;!-- 1 创建目标类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userServiceId"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.d_aspect.a_xml.UserServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2 创建切面类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAspectId"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.d_aspect.a_xml.MyAspect"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 3 aop编程 </span></span><br><span class="line"><span class="comment">&lt;aop:aspect&gt; 将切面类 声明“切面”，从而获得通知（方法）</span></span><br><span class="line"><span class="comment">ref 切面类引用</span></span><br><span class="line"><span class="comment">&lt;aop:pointcut&gt; 声明一个切入点，所有的通知都可以使用。</span></span><br><span class="line"><span class="comment">expression 切入点表达式</span></span><br><span class="line"><span class="comment">id 名称，用于其它通知引用</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myAspectId"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.springlearning.d_aspect.a_xml.UserServiceImpl.*(..))"</span> <span class="attr">id</span>=<span class="string">"myPointCut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"myAfterThrowing"</span> <span class="attr">pointcut-ref</span>=<span class="string">"myPointCut"</span> <span class="attr">throwing</span>=<span class="string">"e"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3.1 前置通知 </span></span><br><span class="line"><span class="comment">&lt;aop:before method="" pointcut="" pointcut-ref=""/&gt;</span></span><br><span class="line"><span class="comment">method : 通知，及方法名</span></span><br><span class="line"><span class="comment">pointcut :切入点表达式，此表达式只能当前通知使用。</span></span><br><span class="line"><span class="comment">pointcut-ref ： 切入点引用，可以与其他通知共享切入点。</span></span><br><span class="line"><span class="comment">通知方法格式：public void myBefore(JoinPoint joinPoint)&#123;</span></span><br><span class="line"><span class="comment">参数1：org.aspectj.lang.JoinPoint  用于描述连接点（目标方法），获得目标方法名等</span></span><br><span class="line"><span class="comment">例如：</span></span><br><span class="line"><span class="comment">&lt;aop:before method="myBefore" pointcut-ref="myPointCut"/&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3.2后置通知  ,目标方法后执行，获得返回值</span></span><br><span class="line"><span class="comment">&lt;aop:after-returning method="" pointcut-ref="" returning=""/&gt;</span></span><br><span class="line"><span class="comment">returning 通知方法第二个参数的名称</span></span><br><span class="line"><span class="comment">通知方法格式：public void myAfterReturning(JoinPoint joinPoint,Object ret)&#123;</span></span><br><span class="line"><span class="comment">参数1：连接点描述</span></span><br><span class="line"><span class="comment">参数2：类型Object，参数名 returning="ret" 配置的</span></span><br><span class="line"><span class="comment">例如：</span></span><br><span class="line"><span class="comment">&lt;aop:after-returning method="myAfterReturning" pointcut-ref="myPointCut" returning="ret" /&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3.3 环绕通知 </span></span><br><span class="line"><span class="comment">&lt;aop:around method="" pointcut-ref=""/&gt;</span></span><br><span class="line"><span class="comment">通知方法格式：public Object myAround(ProceedingJoinPoint joinPoint) throws Throwable&#123;</span></span><br><span class="line"><span class="comment">返回值类型：Object</span></span><br><span class="line"><span class="comment">方法名：任意</span></span><br><span class="line"><span class="comment">参数：org.aspectj.lang.ProceedingJoinPoint</span></span><br><span class="line"><span class="comment">抛出异常</span></span><br><span class="line"><span class="comment">执行目标方法：Object obj = joinPoint.proceed();</span></span><br><span class="line"><span class="comment">例如：</span></span><br><span class="line"><span class="comment">&lt;aop:around method="myAround" pointcut-ref="myPointCut"/&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3.4 抛出异常</span></span><br><span class="line"><span class="comment">&lt;aop:after-throwing method="" pointcut-ref="" throwing=""/&gt;</span></span><br><span class="line"><span class="comment">throwing ：通知方法的第二个参数名称</span></span><br><span class="line"><span class="comment">通知方法格式：public void myAfterThrowing(JoinPoint joinPoint,Throwable e)&#123;</span></span><br><span class="line"><span class="comment">参数1：连接点描述对象</span></span><br><span class="line"><span class="comment">参数2：获得异常信息，类型Throwable ，参数名由throwing="e" 配置</span></span><br><span class="line"><span class="comment">例如：</span></span><br><span class="line"><span class="comment">&lt;aop:after-throwing method="myAfterThrowing" pointcut-ref="myPointCut" throwing="e"/&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3.5 最终通知 </span></span><br><span class="line"><span class="comment">&lt;aop:after method="myAfter" pointcut-ref="myPointCut"/&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"myAfter"</span> <span class="attr">pointcut-ref</span>=<span class="string">"myPointCut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-5-3-个人理解"><a href="#2-5-3-个人理解" class="headerlink" title="2.5.3 个人理解"></a>2.5.3 个人理解</h4><p>​            首先要写的是目标类，目标类包括接口与实现类，有接口实现面向切面编程使用的就是JDK的动态代理，没有的话就会使用CGLIB的字节码增强，如果有接口也可以强制使用CGLIB，只需加一个声明代码（<code>&lt;aop:config proxy-target-class=&quot;true&quot;&gt;</code>）。其次就是切面类，这里面装着许多想要织入目标方法的一些个通知（也就是一些方法），因为采用的是aspectj，所以在切面类中方法名随意些，在配置中才会特意声明这个通知的类型，aspectj的通知类型有6类，包括：</p><p>1.aop:before 前置通知类型，在目标方法之前执行</p><p>2.aop:after-returning 后置通知类型，在目标方法之后执行</p><p>3.aop:around 环绕通知类型，可在目标方法前后分别执行，注意：<span style="color:red">需手动执行目标方法</span></p><p>4.aop:after-throwing 抛出异常通知类型，即可抛出目标方法中存在的异常，在异常之后的方法无法执行</p><p>5.aop:after 最终要执行的方法，与trycatch中的finally一样</p><p>6.aop:delare-parents 引介通知类型，没怎么用</p><p>​    最重要的就是xml文件的配置，首先，需要将目标类与切面类转化成<code>&lt;bean&gt;</code>标签，方便使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1 创建目标类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userServiceId"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.d_aspect.a_xml.UserServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2 创建切面类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAspectId"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.d_aspect.a_xml.MyAspect"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着就是面向切面编程的配置，用<code>&lt;aop:config&gt;</code>标签表明在进行面向切面编程配置，然后声明要进行配置的切面，就是<code>&lt;aop:aspect ref= &quot;myAspectId&quot; &gt;</code>,并将之前声明的切面类引用进来，就是说要在该切面类的基础上进行切面编程，之后，进行切入点表达式的声明<code>&lt;aop:pointcut expression=*&quot;execution(\* com.itheima.d_aspect.a_xml.UserServiceImpl.*(..))&quot; id=&quot;myPointCut&quot; /&gt;</code>，就是说我要对哪些包中的哪些类中的哪些方法（目标方法）进行切入，这个切入点表达式也是有一定的格式的，之后便可以进行各种方法的切入了，格式大致为         <code>&lt;aop:before method=&quot;&quot; pointcut=&quot;&quot; pointcut-ref=&quot;&quot;/&gt;</code> ，先声明通知类型，再去切面类中找具体的方法，切入点的话，有上述两种写法，pointcut=””指的是当前通知独有，pointcut-ref=””就是所有通知共同的引用，只是在环绕通知的时候，它的切面类必须声明一个参数(ProceedingJoinPoint joinPoint)  即可执行的joinPoint，用<code>Object obj = joinPoint.proceed();</code>来手动执行目标方法，其他通知类型的参数都是可有可无的。</p><h3 id="2-6-基于注解"><a href="#2-6-基于注解" class="headerlink" title="2.6 基于注解"></a>2.6 基于注解</h3><h4 id="2-6-1-替换Bean"><a href="#2-6-1-替换Bean" class="headerlink" title="2.6.1 替换Bean"></a>2.6.1 替换Bean</h4><p>​            在基于xml中，首先需要声明两个<code>&lt;bean&gt;</code>标签，用来创建目标类和切面类(通知)，在基于注解中，就可以省略这个<code>&lt;bean&gt;</code>标签，在目标类的头上添加注解<code>@Service(&quot;UserServiceId&quot;)</code>，在切面类的头上添加部件注解<code>@Component</code>，就可以在运行测试时找到这两个类。只不过要注意在配置文件中添加扫描注解类；以及命名空间也要做添加。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">                       </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 1.扫描 注解类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.springlearning.d_aspect.b_anno"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-6-2-替换AOP"><a href="#2-6-2-替换AOP" class="headerlink" title="2.6.2 替换AOP"></a>2.6.2 替换AOP</h4><ul><li><p>必须进行aspectj 自动代理</p><p><code>&lt;!-- 2.确定 aop注解生效 --&gt;</code></p><p><code>&lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</code></p></li><li><p>之前声明切面是在<code>&lt;aop config&gt;</code>的标签下的<code>&lt;aop:aspect ref=&quot;myAspectId&quot;</code>中进行的，在基于注解中，就可以在切面类的部件注解下面再添加一个<code>@Aspect</code>注解就可以找到这个切面类，因为所有方法需要进行通知的方法都是放在这个切面类中的，所以可以不对这个切面类的注解进行命名。</p></li><li><p><strong>替换前置通知，</strong>之前是在<code>&lt;aop:aspect ref=&quot;myAspectId&quot;</code>标签下进行通知标签的设置。例如前置通知<code>&lt;aop:before method=&quot;myBefore&quot; pointcut-ref=&quot;myPointCut&quot;/&gt;</code>，在基于注解中，就可以直接在切面类中的各个方法的头部以添加注解的方式，实现通知方法的织入，例如前置通知<code>@Before(&quot;execution(* com.springlearning.d_aspect.b_anno.UserServiceImpl.*(..))&quot;)</code>，当然，这个切入点也只是当前通知有效，也可以像xml中一样设置公共切入点。</p></li><li><p><strong>替换公共切入点</strong>，之前声明公共切入点是在<code>&lt;aop config&gt;</code>标签下配置<code>&lt;aop:pointcut expression=&quot;execution(* com.springlearning.d_aspect.a_xml.UserServiceImpl.*(..))&quot; id=&quot;myPointCut&quot;/&gt;</code>标签，在注解中，可以在切面类中加一个方法，名字就为myPointCut，在该方法头部添加<code>@Pointcut(&quot;execution(* com.springlearning.d_aspect.b_anno.UserServiceImpl.*(..))&quot;)</code>，注解，以后，哪一个方法想用这个切入点，直接在注解中调用引用<code>&quot;myPointCut()&quot;</code>这个方法即可。</p></li><li><p><strong>替换后置</strong></p><ul><li>之前</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"myAfterReturning"</span> <span class="attr">pointcut-ref</span>=<span class="string">"myPointCut"</span> <span class="attr">returning</span>=<span class="string">"ret"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>基于注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@AfterReturning</span>(value=<span class="string">"myPointCut()"</span>,returning=<span class="string">"ret"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfterReturning</span><span class="params">(JoinPoint joinPoint,Object ret)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"后置通知与当前目标方法名称："</span>+joinPoint.getSignature().getName()+<span class="string">"，目标方法的返回值为："</span>+ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>替换环绕</strong></p><ul><li>之前</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"myAround"</span> <span class="attr">pointcut-ref</span>=<span class="string">"myPointCut"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>基于注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Around</span>(value = <span class="string">"myPointCut()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">myAround</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable</span>&#123;<span class="comment">//必须有参数为可执行的joinPoint</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"环绕通知的前面"</span>);</span><br><span class="line"><span class="comment">//手动执行目标方法</span></span><br><span class="line">Object obj = joinPoint.proceed();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"环绕通知的后面"</span>);</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>替换抛出异常</strong></p><ul><li>之前</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"myAfterThrowing"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* com.springlearning.d_aspect.a_xml.UserServiceImpl.*(..))"</span> <span class="attr">throwing</span>=<span class="string">"e"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>基于注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing</span>(value=<span class="string">"execution(* com.springlearning.d_aspect.a_xml.UserServiceImpl.*(..))"</span>,throwing=<span class="string">"e"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfterThrowing</span><span class="params">(JoinPoint joinPoint,Throwable e)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"抛出异常通知："</span>+e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>替换最终通知</strong></p><ul><li>之前</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"myAfter"</span> <span class="attr">pointcut-ref</span>=<span class="string">"myPointCut"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>基于注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@After</span>(value = <span class="string">"myPointCut()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfter</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"最终通知！！！！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-6-3-切面类"><a href="#2-6-3-切面类" class="headerlink" title="2.6.3 切面类"></a>2.6.3 切面类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springlearning.d_aspect.b_anno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面类，含有多个通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//切入点当前有效</span></span><br><span class="line"><span class="comment">//@Before("execution(* com.springlearning.d_aspect.b_anno.UserServiceImpl.*(..))")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myBefore</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"前置通知与当前目标方法名称："</span>+joinPoint.getSignature().getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明公共切入点</span></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(* com.springlearning.d_aspect.b_anno.UserServiceImpl.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">myPointCut</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@AfterReturning(value="myPointCut()",returning="ret")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfterReturning</span><span class="params">(JoinPoint joinPoint,Object ret)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"后置通知与当前目标方法名称："</span>+joinPoint.getSignature().getName()+<span class="string">"，目标方法的返回值为："</span>+ret);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Around(value = "myPointCut()")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">myAround</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable</span>&#123;<span class="comment">//必须有参数为可执行的joinPoint</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"环绕通知的前面"</span>);</span><br><span class="line"><span class="comment">//手动执行目标方法</span></span><br><span class="line">Object obj = joinPoint.proceed();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"环绕通知的后面"</span>);</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@AfterThrowing(value = "myPointCut()",throwing="e")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfterThrowing</span><span class="params">(JoinPoint joinPoint,Throwable e)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"抛出异常通知："</span>+e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@After</span>(value = <span class="string">"myPointCut()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfter</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"最终通知！！！！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-6-4-Spring-配置"><a href="#2-6-4-Spring-配置" class="headerlink" title="2.6.4 Spring 配置"></a>2.6.4 Spring 配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.扫描 注解类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.springlearning.d_aspect.b_anno"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.确定 aop注解生效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-6-5-AOP注解总结"><a href="#2-6-5-AOP注解总结" class="headerlink" title="2.6.5 AOP注解总结"></a>2.6.5 AOP注解总结</h4><p>@Aspect 声明切面，修饰切面类，从而获得 通知。</p><p>通知</p><p>​    @Before 前置</p><p>​    @AfterReturning 后置</p><p>​    @Around 环绕</p><p>​    @AfterThrowing 抛出异常</p><p>​    @After 最终</p><p>切入点</p><p>​    @PointCut ，修饰方法 private void xxx(){} 之后通过“方法名”获得切入点引用</p><h2 id="三、JdbcTemplate（jdbc模板）"><a href="#三、JdbcTemplate（jdbc模板）" class="headerlink" title="三、JdbcTemplate（jdbc模板）"></a>三、JdbcTemplate（jdbc模板）</h2><ul><li><p>spring 提供用于操作JDBC工具类，类似：DBUtils。</p></li><li><p>依赖 连接池DataSource （数据源）</p></li></ul><h3 id="3-1-环境搭建"><a href="#3-1-环境搭建" class="headerlink" title="3.1 环境搭建"></a>3.1 环境搭建</h3><h4 id="3-1-1-创建表"><a href="#3-1-1-创建表" class="headerlink" title="3.1.1 创建表"></a>3.1.1 创建表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> ee19_spring_day02;</span><br><span class="line"><span class="keyword">use</span> ee19_spring_day02;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_user(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">  username <span class="built_in">varchar</span>(<span class="number">50</span>),</span><br><span class="line">  <span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">32</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(username,<span class="keyword">password</span>) <span class="keyword">values</span>(<span class="string">'jack'</span>,<span class="string">'1234'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(username,<span class="keyword">password</span>) <span class="keyword">values</span>(<span class="string">'rose'</span>,<span class="string">'5678'</span>);</span><br></pre></td></tr></table></figure><h4 id="3-1-2-导入jar包"><a href="#3-1-2-导入jar包" class="headerlink" title="3.1.2 导入jar包"></a>3.1.2 导入jar包</h4><p><img src="http://q1o3t6lvp.bkt.clouddn.com/jdbc%E6%A8%A1%E6%9D%BFjar%E5%8C%85.png" alt="没有找到"></p><h4 id="3-1-3-javabean"><a href="#3-1-3-javabean" class="headerlink" title="3.1.3 javabean"></a>3.1.3 javabean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-使用api（了解）"><a href="#3-2-使用api（了解）" class="headerlink" title="3.2 使用api（了解）"></a>3.2 使用api（了解）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.创建数据源（连接池）dbcp</span></span><br><span class="line">BasicDataSource dataSource = <span class="keyword">new</span> BasicDataSource();</span><br><span class="line"><span class="comment">//*基本4项</span></span><br><span class="line">dataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">dataSource.setUrl(<span class="string">"jdbc:mysql://localhost:3306/ee19_spring_day02"</span>);</span><br><span class="line">dataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">dataSource.setPassword(<span class="string">"873383"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建模板</span></span><br><span class="line">JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate();</span><br><span class="line">jdbcTemplate.setDataSource(dataSource);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.通过api操作</span></span><br><span class="line">jdbcTemplate.update(<span class="string">"insert into t_user(username,password) values(?,?);"</span>, <span class="string">"tom"</span>,<span class="string">"998"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-配置DBCP"><a href="#3-3-配置DBCP" class="headerlink" title="3.3 配置DBCP"></a>3.3 配置DBCP</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSourceId"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ee19_spring_day02?characterEncoding=utf8&amp;useSSL=true"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"873383"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 创建模板 ,需要注入数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplateId"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSourceId"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置dao --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDaoId"</span> <span class="attr">class</span>=<span class="string">"com.springjdbc.c_dbcp.UserDao"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">ref</span>=<span class="string">"jdbcTemplateId"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-配置C3P0"><a href="#3-4-配置C3P0" class="headerlink" title="3.4 配置C3P0"></a>3.4 配置C3P0</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建数据源 c3p0 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSourceId"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ee19_spring_day02?characterEncoding=utf8&amp;useSSL=true"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"873383"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 创建模板 ,需要注入数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplateId"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSourceId"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置dao --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDaoId"</span> <span class="attr">class</span>=<span class="string">"com.springjdbc.d_c3p0.UserDao"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">ref</span>=<span class="string">"jdbcTemplateId"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-使用-JdbcDaoSupport"><a href="#3-5-使用-JdbcDaoSupport" class="headerlink" title="3.5 使用 JdbcDaoSupport"></a>3.5 使用 JdbcDaoSupport</h3><h4 id="3-5-1-dao层"><a href="#3-5-1-dao层" class="headerlink" title="3.5.1 dao层"></a>3.5.1 dao层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">String sql = <span class="string">"update t_user set username=?,password=?, where id =?"</span>;</span><br><span class="line">Object[] args = &#123;user.getUsername(),user.getPassword(),user.getId()&#125;;</span><br><span class="line"><span class="keyword">this</span>.getJdbcTemplate().update(sql, args);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-2-配置properties"><a href="#3-5-2-配置properties" class="headerlink" title="3.5.2 配置properties"></a>3.5.2 配置properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.jdbcUrl</span>=<span class="string">jdbc:mysql://localhost:3306/ee19_spring_day02</span></span><br><span class="line"><span class="meta">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">873383</span></span><br></pre></td></tr></table></figure><h4 id="3-5-3-Spring-配置文件"><a href="#3-5-3-Spring-配置文件" class="headerlink" title="3.5.3 Spring 配置文件"></a>3.5.3 Spring 配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加载配置文件 </span></span><br><span class="line"><span class="comment">       "classpath:"前缀表示 src下</span></span><br><span class="line"><span class="comment">在配置文件之后通过  $&#123;key&#125; 获得内容</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:com/springjdbc/e_jdbcdaosupport/jdbcInfo.properties"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">   <span class="comment">&lt;!-- 创建数据源 c3p0 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSourceId"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.jdbcUrl&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>  <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置dao </span></span><br><span class="line"><span class="comment">  *dao 继承 JdbcDaoSupport，之后只需要注入数据源，底层将自动创建模板</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDaoId"</span> <span class="attr">class</span>=<span class="string">"com.springjdbc.e_jdbcdaosupport.UserDao"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSourceId"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><ul><li><p>AOP ：切面编程</p><p>切面：切入点 和 通知 结合</p></li><li><p>spring aop 编程</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">方法1：</span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"切入点表达式"</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:adisor</span>  <span class="attr">advice-ref</span>=<span class="string">"通知引用"</span> <span class="attr">pointcut-ref</span>=<span class="string">"切入点的引用"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">方法2：</span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:advisor</span>  <span class="attr">advice-ref</span>=<span class="string">"通知引用"</span> <span class="attr">pointcut</span>=<span class="string">"切入点表达式"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>AspectJ xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"切面类"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">aop:pointcut</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">aop:before</span>&gt;</span>  前置</span><br><span class="line">     <span class="tag">&lt;<span class="name">aop:afterReturning</span>  <span class="attr">returning</span>=<span class="string">"第二个参数名称"</span>&gt;</span> 后置</span><br><span class="line">     <span class="tag">&lt;<span class="name">aop:around</span>&gt;</span> 环绕</span><br><span class="line">     <span class="tag">&lt;<span class="name">aop:afterThrowing</span> <span class="attr">throwing</span>=<span class="string">"第二。。。"</span>&gt;</span> 抛出异常</span><br><span class="line">     <span class="tag">&lt;<span class="name">aop:after</span>&gt;</span> 最终</span><br></pre></td></tr></table></figure><ul><li><p>AspectJ annotation </p><p>​    @Aspect</p><p>​    @Pointcut(“表达式”) private void xxx(){}</p><p>​    @Before @…</p></li><li><p>切入点表达式</p></li></ul><p><code>&lt;aop:pointcut expression=&quot;execution(* com.itheima.crm.*.service..*.*(..))&quot; id=&quot;&quot;&gt;</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;一、AOP&quot;&gt;&lt;a href=&quot;#一、AOP&quot; class=&quot;headerlink&quot; title=&quot;一、AOP&quot;&gt;&lt;/a&gt;一、AOP&lt;/h2&gt;&lt;h3 id=&quot;1-1-AOP-介绍&quot;&gt;&lt;a href=&quot;#1-1-AOP-介绍&quot; class=&quot;headerlink&quot; title=&quot;1.1 AOP 介绍&quot;&gt;&lt;/a&gt;1.1 AOP 介绍&lt;/h3&gt;&lt;h4 id=&quot;1-1-1-什么是AOP？&quot;&gt;&lt;a href=&quot;#1-1-1-什么是AOP？&quot; class=&quot;headerlink&quot; title=&quot;1.1.1 什么是AOP？&quot;&gt;&lt;/a&gt;1.1.1 什么是AOP？&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在软件业，AOP为Aspect Oriented Programming的缩写，意为：&lt;span style=&quot;color:red&quot;&gt;面向切面编程&lt;/span&gt;，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP（面向对象编程）的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的&lt;span style=&quot;color:red&quot;&gt;耦合度降低&lt;/span&gt;，提高程序的&lt;span style=&quot;color:red&quot;&gt;可重用性&lt;/span&gt;，同时提高了开发的效率。&lt;/li&gt;
&lt;li&gt;AOP采取&lt;strong&gt;横向抽取&lt;/strong&gt;机制，取代了传统&lt;strong&gt;纵向继承&lt;/strong&gt;体系重复性代码&lt;/li&gt;
&lt;li&gt;经典应用：事务管理、性能监视、安全检查、缓存 、日志等&lt;/li&gt;
&lt;li&gt;Spring AOP使用纯Java实现，不需要专门的编译过程和类加载器，在运行期通过代理方式向目标类织入增强代码&lt;/li&gt;
&lt;li&gt;AspectJ是一个基于Java语言的&lt;strong&gt;AOP框架&lt;/strong&gt;，Spring2.0开始，Spring AOP引入对Aspect的支持，AspectJ扩展了Java语言，提供了一个专门的编译器，在编译时提供横向代码的织入  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1-1-2-AOP实现原理&quot;&gt;&lt;a href=&quot;#1-1-2-AOP实现原理&quot; class=&quot;headerlink&quot; title=&quot;1.1.2 AOP实现原理&quot;&gt;&lt;/a&gt;1.1.2 AOP实现原理&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;aop底层将采用代理机制进行实现。&lt;/li&gt;
&lt;li&gt;接口 + 实现类：spring采用 jdk 的&lt;span style=&quot;color:red&quot;&gt;动态代理&lt;/span&gt;Proxy。&lt;/li&gt;
&lt;li&gt;实现类：spring 采用&lt;span style=&quot;color:red&quot;&gt; cglib字节码增强&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="框架学习" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习第一天</title>
    <link href="http://yoursite.com/2019/11/27/Spring%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <id>http://yoursite.com/2019/11/27/Spring%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%A4%A9/</id>
    <published>2019-11-27T13:03:13.000Z</published>
    <updated>2020-05-11T02:58:16.618Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="一、Spring框架概述"><a href="#一、Spring框架概述" class="headerlink" title="一、Spring框架概述"></a>一、Spring框架概述</h2><h3 id="1-1-什么是Spring"><a href="#1-1-什么是Spring" class="headerlink" title="1.1 什么是Spring"></a>1.1 什么是Spring</h3><ul><li><p>Spring是一个开源框架，Spring是于2003 年兴起的一个轻量级的Java 开发框架，由Rod Johnson 在其著作Expert One-On-One J2EE Development and Design中阐述的部分理念和原型衍生而来。它是为了解决企业应用开发的复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许使用者选择使用哪一个组件，同时为 J2EE 应用程序开发提供集成的框架。Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。Spring的核心是控制反转（IoC）和面向切面（AOP）。简单来说，Spring是一个<strong>分层</strong>的JavaSE/EE <span style="color:red">full-stack(一站式) </span><strong>轻量级</strong>开源框架。</p></li><li><p><strong>轻量级</strong>指的是与EJB对比，依赖资源少，销毁的资源少 </p></li><li><p><strong>分层</strong>指的是一站式，每一个层都提供的解决方案</p></li><li><ul><li>web层：struts，spring-MVC</li><li>service层：spring</li><li>dao层：hibernate，mybatis ， jdbcTemplate –&gt; (spring-data了解)</li></ul><a id="more"></a> </li></ul><h3 id="1-2-Spring核心"><a href="#1-2-Spring核心" class="headerlink" title="1.2 Spring核心"></a>1.2 Spring核心</h3><p>Spring的核心是<span style="color:red">控制反转(IoC)和面向切面(AOP)</span></p><h3 id="1-3-Spring优点"><a href="#1-3-Spring优点" class="headerlink" title="1.3 Spring优点"></a>1.3 Spring优点</h3><ul><li><p>方便解耦，简化开发 （高内聚低耦合）</p><ul><li><p><span style="color:red"> Spring就是一个大工厂  </span>(容器)，可以将所有对象创建和依赖关系维护，交给Spring管理</p></li><li><p><span style="color:red">Spring工厂是用于生成bean  </span></p></li></ul></li><li><p>AOP编程的支持</p><ul><li>Spring提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能</li></ul></li><li><p>声明式事务的支持</p><ul><li>只需要通过配置就可以完成对事务的管理，而无需手动编程</li></ul></li><li><p>方便程序的测试</p><ul><li>Spring对Junit4支持，可以通过注解方便的测试Spring程序</li></ul></li><li><p>方便集成各种优秀框架</p><ul><li>Spring不排斥各种优秀的开源框架，其内部提供了对各种优秀框架（如：Struts、Hibernate、MyBatis、Quartz等）的直接支持</li></ul></li><li><p>降低JavaEE API的使用难度</p><ul><li>Spring 对JavaEE开发中非常难用的一些API（JDBC、JavaMail、远程调用等），都提供了封装，使这些API应用难度大大降低</li></ul></li></ul><h3 id="1-4-Spring体系结构"><a href="#1-4-Spring体系结构" class="headerlink" title="1.4 Spring体系结构"></a>1.4 Spring体系结构</h3><ul><li><strong>核心容器(Core Container)包括</strong><ul><li>Beans(管理bean)</li><li>Core(核心)</li><li>Context(配置文件)</li><li>Expression Language(SpEL表达式)</li></ul></li><li><strong>第二层包括</strong><ul><li>AOP(切面编程)</li><li>Aspects(AOP框架)</li><li>Instrumentation(了解即可)</li></ul></li><li><strong>第三层包括</strong><ul><li>JDBC(jdbcTemplate数据库开发)</li><li>ORM(整合hibernate)</li><li>OXM(了解即可)</li><li>JMS(了解即可)</li><li>Transactions(事物管理 tx)</li></ul></li><li><strong>第四层包括</strong><ul><li>Web(web开发)</li><li>Struts(整合struts)</li></ul></li><li><strong>第五层包括</strong><ul><li>Test(整合Junit)</li></ul></li></ul><h2 id="二、入门之IoC-掌握）"><a href="#二、入门之IoC-掌握）" class="headerlink" title="二、入门之IoC(掌握）"></a>二、入门之IoC(掌握）</h2><blockquote><p>​        准备工作，基于MyEclipse，所以需导入jar包，jar包包括 4个核心（beans、core、context、expression） + 1个依赖（commons-loggins…jar）  </p></blockquote><p><img src="http://q1o3t6lvp.bkt.clouddn.com/image/jpg20191128195309.png" alt="没有找到"></p><h3 id="2-1-目标类"><a href="#2-1-目标类" class="headerlink" title="2.1 目标类"></a>2.1 目标类</h3><ul><li>提供UserService接口和实现类</li><li>获得UserService实现类的实例</li></ul><p>Spring的作用就是由Spring创建对象实例–&gt; IoC 控制反转（Inverse of Control）之后需要实例对象时，从spring工厂（容器）中获得，需要将实现类的全限定名称配置到xml文件中  </p><h4 id="第一步：创建接口和实现类"><a href="#第一步：创建接口和实现类" class="headerlink" title="第一步：创建接口和实现类"></a>第一步：创建接口和实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*接口*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*实现类*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"a_ioc add user"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第二步：配置文件"><a href="#第二步：配置文件" class="headerlink" title="第二步：配置文件"></a>第二步：配置文件</h4><p>​        <strong>注意事项</strong></p><ul><li>位置：任意，开发中一般在classpath下（src）</li><li>名称：任意，开发中常用applicationContext.xml</li><li>内容：添加schema约束</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置service </span></span><br><span class="line"><span class="comment">&lt;bean&gt; 配置需要创建的对象</span></span><br><span class="line"><span class="comment">id ：用于之后从spring容器获得实例时使用的</span></span><br><span class="line"><span class="comment">class ：需要创建实例的全限定类名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userServiceId"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.a_ioc.UserServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="第三步：测试"><a href="#第三步：测试" class="headerlink" title="第三步：测试"></a>第三步：测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//从spring容器获得</span></span><br><span class="line"><span class="comment">//1 获得容器</span></span><br><span class="line">String xmlPath = <span class="string">"com/springlearning/a_ioc/beans.xml"</span>;</span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(xmlPath);</span><br><span class="line"><span class="comment">//2获得内容 --不需要自己new，都是从spring容器获得</span></span><br><span class="line">UserService userService = (UserService) applicationContext.getBean(<span class="string">"userServiceId"</span>);</span><br><span class="line">userService.addUser();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、入门之DI-掌握"><a href="#三、入门之DI-掌握" class="headerlink" title="三、入门之DI(掌握)"></a>三、入门之DI(掌握)</h2><h3 id="3-1-目标类"><a href="#3-1-目标类" class="headerlink" title="3.1 目标类"></a>3.1 目标类</h3><ul><li>创建BookService接口和实现类</li><li>创建BookDao接口和实现类</li><li>将dao和service配置 xml文件</li><li>使用api测试</li></ul><h4 id="第一步：创建service和dao的接口与实现类"><a href="#第一步：创建service和dao的接口与实现类" class="headerlink" title="第一步：创建service和dao的接口与实现类"></a>第一步：创建service和dao的接口与实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*接口*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*实现类*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式1：之前，接口=实现类</span></span><br><span class="line"><span class="comment">//private BookDao bookDao = new BookDaoImpl();</span></span><br><span class="line"><span class="comment">// 方式2：接口 + setter</span></span><br><span class="line"><span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookDao</span><span class="params">(BookDao bookDao)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.bookDao = bookDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.bookDao.save();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*接口*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*实现类*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title">BookDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"di  add book"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第二步：配置文件-1"><a href="#第二步：配置文件-1" class="headerlink" title="第二步：配置文件"></a>第二步：配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">                       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">模拟spring执行过程</span></span><br><span class="line"><span class="comment">创建service实例：BookService bookService = new BookServiceImpl()IoC  &lt;bean&gt;</span></span><br><span class="line"><span class="comment">创建dao实例：BookDao bookDao = new BookDaoImpl()IoC</span></span><br><span class="line"><span class="comment">将dao设置给service：bookService.setBookDao(bookDao);DI   &lt;property&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;property&gt; 用于进行属性注入</span></span><br><span class="line"><span class="comment">name： bean的属性名，通过setter方法获得</span></span><br><span class="line"><span class="comment">setBookDao ##&gt; BookDao  ##&gt; bookDao</span></span><br><span class="line"><span class="comment">ref ：另一个bean的id值的引用</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 创建service --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bookServiceId"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.b_di.BookServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bookDao"</span> <span class="attr">ref</span>=<span class="string">"bookDaoId"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- 依赖注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 创建dao实例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bookDaoId"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.b_di.BookDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="第三步：测试-1"><a href="#第三步：测试-1" class="headerlink" title="第三步：测试"></a>第三步：测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDI</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从spring容器获得</span></span><br><span class="line">String xmlPath = <span class="string">"com/springlearning/b_di/beans.xml"</span>;</span><br><span class="line"></span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(xmlPath);</span><br><span class="line">BookService bookService = (BookService) applicationContext.getBean(<span class="string">"bookServiceId"</span>);</span><br><span class="line"></span><br><span class="line">bookService.addBook();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、核心API"><a href="#四、核心API" class="headerlink" title="四、核心API"></a>四、核心API</h2><ul><li>API整体了解，之后不使用，在学习过程需要</li></ul><p><img src="http://q1o3t6lvp.bkt.clouddn.com/image/jpg%E6%A0%B8%E5%BF%83api.png" alt="无法显示"></p><ul><li>BeanFactory ：这是一个工厂，用于生成任意bean(采取延迟加载，第一次getBean时才会初始化Bean)</li><li>ApplicationContext：是BeanFactory的子接口，功能更强大。（国际化处理、事件传递、Bean自动装配、各种不同应用层的Context实现）。当配置文件被加载，就进行对象实例化  </li></ul><p><span style="color:red">         <strong>ClassPathXmlApplicationContext</strong>   </span>用于加载classpath（类路径、src）下的xml</p><p>​                             加载xml运行时位置 –&gt; /WEB-INF/classes/…xml  </p><p><span style="color:red">         <strong>FileSystemXmlApplicationContext</strong>   </span>用于加载指定盘符下的xml  </p><p>​                            加载xml运行时位置 –&gt; /WEB-INF/…xml        </p><p>​                通过java web ServletContext.getRealPath() 获得具体盘符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//使用BeanFactory  --第一次调用getBean实例化</span></span><br><span class="line">String xmlPath = <span class="string">"com/springlearning/b_di/beans.xml"</span>;</span><br><span class="line"></span><br><span class="line">BeanFactory beanFactory = <span class="keyword">new</span> XmlBeanFactory(<span class="keyword">new</span> ClassPathResource(xmlPath));</span><br><span class="line"></span><br><span class="line">BookService bookService = (BookService) beanFactory.getBean(<span class="string">"bookServiceId"</span>);<span class="comment">//第一次调用getBean时进行对象实例化</span></span><br><span class="line"></span><br><span class="line">bookService.addBook();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、装配Bean基于XML"><a href="#五、装配Bean基于XML" class="headerlink" title="五、装配Bean基于XML"></a>五、装配Bean基于XML</h2><h3 id="5-1-实例化方式"><a href="#5-1-实例化方式" class="headerlink" title="5.1 实例化方式"></a>5.1 实例化方式</h3><ul><li>三种bean实例化方式：<strong>默认构造</strong>、<strong>静态工厂</strong>、<strong>实例工厂</strong></li></ul><h4 id="5-1-1默认构造"><a href="#5-1-1默认构造" class="headerlink" title="5.1.1默认构造"></a>5.1.1默认构造</h4><p>​       <code>&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;</code> 必须提供默认构造</p><h4 id="5-1-2-静态工厂"><a href="#5-1-2-静态工厂" class="headerlink" title="5.1.2 静态工厂"></a>5.1.2 静态工厂</h4><ul><li><p>常用与spring整合其他框架（或者工具)</p></li><li><p>静态工厂指用于生成实例对象，所有的方法必须是static</p><p><code>&lt;bean id=&quot;&quot; class=&quot;工厂全限定类名&quot; factory-method=&quot;静态方法&quot;&gt;</code> </p></li></ul><h5 id="5-1-2-1-工厂"><a href="#5-1-2-1-工厂" class="headerlink" title="5.1.2.1 工厂"></a>5.1.2.1 工厂</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springlearning.c_inject.b_static_factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态工厂</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> l8733</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserService <span class="title">createService</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-1-2-2-Spring配置"><a href="#5-1-2-2-Spring配置" class="headerlink" title="5.1.2.2 Spring配置"></a>5.1.2.2 Spring配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将静态工厂创建的实例交予spring </span></span><br><span class="line"><span class="comment">class 确定静态工厂全限定类名</span></span><br><span class="line"><span class="comment">factory-method 确定静态方法名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userServiceId"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.c_inject.b_static_factory.MyBeanFactory"</span> <span class="attr">factory-method</span>=<span class="string">"createService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-1-3-实例工厂"><a href="#5-1-3-实例工厂" class="headerlink" title="5.1.3 实例工厂"></a>5.1.3 实例工厂</h4><ul><li>实例工厂：必须先有工厂实例对象，通过实例对象创建对象。提供所有的方法都是“非静态”的。</li></ul><h5 id="5-1-3-1-工厂"><a href="#5-1-3-1-工厂" class="headerlink" title="5.1.3.1 工厂"></a>5.1.3.1 工厂</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springlearning.c_inject.c_factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实例工厂,所有方法非静态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> l8733</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserService <span class="title">createService</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-1-3-2-Spring配置"><a href="#5-1-3-2-Spring配置" class="headerlink" title="5.1.3.2 Spring配置"></a>5.1.3.2 Spring配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建工厂实例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myBeanFactoryId"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.c_inject.c_factory.MyBeanFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 获得userservice </span></span><br><span class="line"><span class="comment">* factory-bean 确定工厂实例</span></span><br><span class="line"><span class="comment">* factory-method 确定普通方法</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userServiceId"</span> <span class="attr">factory-bean</span>=<span class="string">"myBeanFactoryId"</span> <span class="attr">factory-method</span>=<span class="string">"createService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-Bean的种类"><a href="#5-2-Bean的种类" class="headerlink" title="5.2 Bean的种类"></a>5.2 Bean的种类</h3><p><strong>第一种：</strong></p><p>普通bean：之前操作的都是普通bean。<code>&lt;bean id=&quot;&quot; class=&quot;A&quot;&gt;</code>，spring直接创建A实例，并返回</p><p><strong>第二种：</strong></p><p>FactoryBean：是一个特殊的bean，具有工厂生成对象能力，只能生成特定的对象。</p><p>​    bean必须使用 FactoryBean接口，此接口提供方法 getObject() 用于获得特定bean。</p><p>​    <code>&lt;bean id=&quot;&quot; class=&quot;FB&quot;&gt;</code>先创建FB实例，然后调用getObject()方法，并返回方法的返回值</p><p>​       例如：FB fb = new FB();</p><p>​                   return fb.getObject();</p><p><strong>第三种：</strong></p><p>BeanFactory：工厂，用于生成任意bean。比如生产第一种Bean。</p><p><strong>BeanFactory 和 FactoryBean 对比：</strong></p><p>FactoryBean：特殊bean，用于生成另一个特定的bean。例如：ProxyFactoryBean ，此工厂bean用于生产代理。<code>&lt;bean id=&quot;&quot; class=&quot;....ProxyFactoryBean&quot;&gt;</code>获得代理对象实例。AOP使用</p><h3 id="5-3-Bean的作用域"><a href="#5-3-Bean的作用域" class="headerlink" title="5.3 Bean的作用域"></a>5.3 Bean的作用域</h3><table><thead><tr><th align="left">类别</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">singleton</td><td align="left">在Spring IOC容器中仅存在一个Bean实例，Bean都以单例模式存在，singleton为默认值</td></tr><tr><td align="left">prototype</td><td align="left">每次从容器中调用Bean时，都返回一个新的实例，即每次调用getBean()时，相当于执行new XxxBean()</td></tr><tr><td align="left">request</td><td align="left">每次HTTP请求都会创建一个新的Bean，该作用域仅适用于WebApplicationContext环境<br>（每次http请求是会创建一个实例，该实例仅在当前http request有效）</td></tr><tr><td align="left">session</td><td align="left">同一个HTTP Session共享一个Bean，不同Session使用不同Bean，仅适用于WebApplicationContext环境 <br>（每次http请求时会创建一个实例，该实例仅在当前http session有效）</td></tr><tr><td align="left">globalsession</td><td align="left">一般用于Portlet应用环境，该作用域仅适用于WebApplicationContext环境 <br>（全局session，仅在portlet应用中使用）</td></tr></tbody></table><ul><li><p>取值：</p><p><span style="color:red">         singleton 单例  </span>,默认值</p><p><span style="color:red">                prototype 多例</span>,每执行一次getBean将获得一个实例。例如:struts整合spring，配置action多例。  </p></li><li><p>配置信息</p><p><code>&lt;bean id=*&quot;userServiceId&quot; class=*&quot;com.springlearning.d_scope.UserServiceImpl&quot; *scope=*&quot;prototype&quot;&gt;&lt;/bean&gt;</code></p></li></ul><p><strong>如果为单例模式，new的对象都是同一个，如果为多例模式，new的对象是不同的</strong></p><p><img src="http://q1o3t6lvp.bkt.clouddn.com/2019-11-29_14-34-30%E6%88%AA%E5%B1%8F.jpg" alt="没有找到"></p><h3 id="5-4-Spring-Bean的生命周期"><a href="#5-4-Spring-Bean的生命周期" class="headerlink" title="5.4 Spring Bean的生命周期"></a>5.4 Spring Bean的生命周期</h3><p><img src="http://q1o3t6lvp.bkt.clouddn.com/SpringBean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="没有找到"></p><p><strong>总结：</strong></p><p>​         对于springbean的生命周期，我们需要关注的主要有两个方法：</p><p>　　　　1.增强bean的功能可以使用后处理Bean，BeanPostProcessor</p><p>　　　　2.如果需要初始化或销毁操作，我们可以使用init-method方法和destory-method方法。</p><p>　同时还需要注意一点：destory-method方法是只针对于<strong>scope=singleton</strong>的时候才有效果！</p><h4 id="5-4-1-初始化和销毁"><a href="#5-4-1-初始化和销毁" class="headerlink" title="5.4.1 初始化和销毁"></a>5.4.1 初始化和销毁</h4><ul><li>目标方法执行前和执行后，将进行初始化或销毁。</li></ul><p><code>&lt;bean id=&quot;&quot; class=&quot;&quot; init-method=&quot;初始化方法名称&quot; destroy-method=&quot;销毁的方法名称&quot;&gt;</code></p><h5 id="5-4-1-1-目标类"><a href="#5-4-1-1-目标类" class="headerlink" title="5.4.1.1 目标类"></a>5.4.1.1 目标类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springlearning.e_lifecycle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"e_lifecycle add user"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myInit</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"初始化！！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myDestory</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"销毁！！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-4-1-2-Spring配置"><a href="#5-4-1-2-Spring配置" class="headerlink" title="5.4.1.2 Spring配置"></a>5.4.1.2 Spring配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">init-method 用于配置初始化方法,准备数据等</span></span><br><span class="line"><span class="comment">destroy-method 用于配置销毁方法,清理资源等</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">     </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userServiceId"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.e_lifecycle.UserServiceImpl"</span> <span class="attr">init-method</span>=<span class="string">"myInit"</span> <span class="attr">destroy-method</span>=<span class="string">"myDestory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5-4-1-3-测试"><a href="#5-4-1-3-测试" class="headerlink" title="5.4.1.3 测试"></a>5.4.1.3 测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">         <span class="comment">//spring工厂</span></span><br><span class="line">         String xmlPath = <span class="string">"com/springlearning/e_lifecycle/beans.xml"</span>;</span><br><span class="line"><span class="comment">//         ApplicationContext applicationContext = new ClassPathXmlApplicationContext(xmlPath);之前</span></span><br><span class="line">         ClassPathXmlApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(xmlPath);<span class="comment">//之后</span></span><br><span class="line">         UserService userService = (UserService) applicationContext.getBean(<span class="string">"userServiceId"</span>);</span><br><span class="line">         userService.addUser();</span><br><span class="line">         </span><br><span class="line">       <span class="comment">/*要求：</span></span><br><span class="line"><span class="comment">        *   1.容器必须close，销毁方法才能执行; </span></span><br><span class="line"><span class="comment">            2.必须是单例的(scope为默认值)*/</span></span><br><span class="line"><span class="comment">// applicationContext.getClass().getMethod("close").invoke(applicationContext);</span></span><br><span class="line"> <span class="comment">// * 此方法接口中没有定义，实现类提供</span></span><br><span class="line"> applicationContext.close();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-4-2-BeanPostProcessor-后处理Bean"><a href="#5-4-2-BeanPostProcessor-后处理Bean" class="headerlink" title="5.4.2 BeanPostProcessor 后处理Bean"></a>5.4.2 BeanPostProcessor 后处理Bean</h4><ul><li><p>spring 提供一种机制，只要实现此接口BeanPostProcessor，并将实现类提供给spring容器，spring容器将自动执行，在初始化方法前执行before()方法，在初始化方法后执行after()方法。 配置<code>&lt;bean class=&quot;&quot;&gt;</code></p></li><li><p>Factory hook(勾子) that allows for custom modification of new bean instances, e.g. checking for marker interfaces or wrapping them with proxies. </p></li><li><p>spring提供工厂勾子，用于修改实例对象，可以生成代理对象，是AOP底层。</p></li></ul><p><strong>模拟</strong></p><p>A a =new A();</p><p>a = B.before(a)           –&gt; 当a的实例对象传递给<strong>后处理bean</strong>，可以生成代理对象并返回。</p><p>a.init();</p><p>a = B.after(a);</p><p>a.addUser();      //生成代理对象，目的在目标方法前后执行（例如：开启事务、提交事务）</p><p>a.destroy()</p><h5 id="5-4-2-1-编写实现类"><a href="#5-4-2-1-编写实现类" class="headerlink" title="5.4.2.1 编写实现类"></a>5.4.2.1 编写实现类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springlearning.e_lifecycle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"在初始化方法之前！"</span> + beanName);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(<span class="keyword">final</span> Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"在初始化方法之后！"</span> + beanName);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bean 目标对象</span></span><br><span class="line"><span class="comment">// 生成 jdk 代理</span></span><br><span class="line"><span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">MyBeanPostProcessor<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>(),</span></span><br><span class="line"><span class="class"><span class="title">bean</span>.<span class="title">getClass</span>().<span class="title">getInterfaces</span>(),</span></span><br><span class="line"><span class="class"><span class="title">new</span> <span class="title">InvocationHandler</span>()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"------开启事务"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行目标方法</span></span><br><span class="line">Object obj = method.invoke(bean, args);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"------提交事务"</span>);</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-4-2-2-配置文件"><a href="#5-4-2-2-配置文件" class="headerlink" title="5.4.2.2 配置文件"></a>5.4.2.2 配置文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将后处理的实现类注册给spring --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.springlearning.e_lifecycle.MyBeanPostProcessor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>问题1：后处理bean作用某一个目标类，还是所有目标类？</p><p>​                答案：所有</p></li><li><p>问题2：如何只作用一个？</p><p>​                答案：通过“参数2”beanName进行控制</p></li></ul><h3 id="5-5-属性依赖注入"><a href="#5-5-属性依赖注入" class="headerlink" title="5.5 属性依赖注入"></a>5.5 属性依赖注入</h3><ul><li><p>依赖注入方式：手动装配 和 自动装配</p></li><li><p>手动装配：一般进行配置信息都采用手动</p><ul><li>基于xml装配：构造方法、setter方法</li><li>基于注解装配：</li></ul></li><li><p>自动装配：struts和spring 整合可以自动装配</p><ul><li>byType：按类型装配</li><li>byName：按名称装配</li><li>constructor构造装配</li><li>auto： 不确定装配  </li></ul></li></ul><h4 id="5-5-1-构造方法"><a href="#5-5-1-构造方法" class="headerlink" title="5.5.1 构造方法"></a>5.5.1 构造方法</h4><h5 id="5-5-1-1-目标类"><a href="#5-5-1-1-目标类" class="headerlink" title="5.5.1.1 目标类"></a>5.5.1.1 目标类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springlearning.f_xml.a_constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer uid;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer uid, String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.uid = uid;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, Integer age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> uid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(Integer uid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.uid = uid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-5-1-2-Spring配置"><a href="#5-5-1-2-Spring配置" class="headerlink" title="5.5.1.2 Spring配置"></a>5.5.1.2 Spring配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 构造方法注入 </span></span><br><span class="line"><span class="comment">* &lt;constructor-arg&gt; 用于配置构造方法一个参数argument</span></span><br><span class="line"><span class="comment">name ：参数的名称</span></span><br><span class="line"><span class="comment">value：设置普通数据</span></span><br><span class="line"><span class="comment">ref：引用数据，一般是另一个bean id值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">index ：参数的索引号，从0开始 。如果只有索引，匹配到了多个构造方法时，默认使用第一个。</span></span><br><span class="line"><span class="comment">type ：确定参数类型</span></span><br><span class="line"><span class="comment">例如：使用名称name</span></span><br><span class="line"><span class="comment">&lt;constructor-arg name="username" value="jack"&gt;&lt;/constructor-arg&gt;</span></span><br><span class="line"><span class="comment">&lt;constructor-arg name="age" value="18"&gt;&lt;/constructor-arg&gt;</span></span><br><span class="line"><span class="comment">例如2：【类型type 和  索引 index】</span></span><br><span class="line"><span class="comment">&lt;constructor-arg index="0" type="java.lang.String" value="1"&gt;&lt;/constructor-arg&gt;</span></span><br><span class="line"><span class="comment">&lt;constructor-arg index="1" type="java.lang.Integer" value="2"&gt;&lt;/constructor-arg&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userId"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.f_xml.a_constructor.User"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5-5-1-3-测试类"><a href="#5-5-1-3-测试类" class="headerlink" title="5.5.1.3 测试类"></a>5.5.1.3 测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springlearning.f_xml.a_constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCons</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="comment">//spring工厂</span></span><br><span class="line">         String xmlPath = <span class="string">"com/springlearning/f_xml/a_constructor/beans.xml"</span>;</span><br><span class="line">         ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(xmlPath);</span><br><span class="line">         User user = applicationContext.getBean(<span class="string">"userId"</span>,User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">         System.out.println(user.getUsername());</span><br><span class="line">         System.out.println(user.getAge());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-5-2-setter方法"><a href="#5-5-2-setter方法" class="headerlink" title="5.5.2 setter方法"></a>5.5.2 setter方法</h4><h5 id="5-5-2-1-目标类"><a href="#5-5-2-1-目标类" class="headerlink" title="5.5.2.1 目标类"></a>5.5.2.1 目标类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*人*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String pname;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Address homeAddr;<span class="comment">//家庭地址</span></span><br><span class="line"><span class="keyword">private</span> Address companyAddr;<span class="comment">//公司地址</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPname</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> pname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPname</span><span class="params">(String pname)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.pname = pname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Address <span class="title">getHomeAddr</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> homeAddr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHomeAddr</span><span class="params">(Address homeAddr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.homeAddr = homeAddr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Address <span class="title">getCompanyAddr</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> companyAddr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompanyAddr</span><span class="params">(Address companyAddr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.companyAddr = companyAddr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Person [pname="</span> + pname + <span class="string">", age="</span> + age + <span class="string">", homeAddr="</span> + homeAddr + <span class="string">", companyAddr="</span> + companyAddr</span><br><span class="line">+ <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*地址*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String addr;</span><br><span class="line"><span class="keyword">private</span> String tel;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAddr</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> addr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddr</span><span class="params">(String addr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.addr = addr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getTel</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> tel;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTel</span><span class="params">(String tel)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.tel = tel;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Address [addr="</span> + addr + <span class="string">", tel="</span> + tel + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-5-2-2-Spring配置"><a href="#5-5-2-2-Spring配置" class="headerlink" title="5.5.2.2 Spring配置"></a>5.5.2.2 Spring配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- setter方法注入 </span></span><br><span class="line"><span class="comment">* 普通数据 </span></span><br><span class="line"><span class="comment">&lt;property name="" value="值"&gt;</span></span><br><span class="line"><span class="comment">等效</span></span><br><span class="line"><span class="comment">&lt;property name=""&gt;</span></span><br><span class="line"><span class="comment">&lt;value&gt;值</span></span><br><span class="line"><span class="comment">* 引用数据</span></span><br><span class="line"><span class="comment">&lt;property name="" ref="另一个bean"&gt;</span></span><br><span class="line"><span class="comment">等效</span></span><br><span class="line"><span class="comment">&lt;property name=""&gt;</span></span><br><span class="line"><span class="comment">&lt;ref bean="另一个bean"/&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"personId"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.f_xml.b_setter.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pname"</span> <span class="attr">value</span>=<span class="string">"阳志"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"homeAddr"</span> <span class="attr">ref</span>=<span class="string">"homeAddrId"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"companyAddr"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"companyAddrId"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"homeAddrId"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.f_xml.b_setter.Address"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"addr"</span> <span class="attr">value</span>=<span class="string">"阜南"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tel"</span> <span class="attr">value</span>=<span class="string">"911"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"companyAddrId"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.f_xml.b_setter.Address"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"addr"</span> <span class="attr">value</span>=<span class="string">"北京八宝山"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tel"</span> <span class="attr">value</span>=<span class="string">"120"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5-5-2-3-测试"><a href="#5-5-2-3-测试" class="headerlink" title="5.5.2.3 测试"></a>5.5.2.3 测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSetter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从spring容器获得</span></span><br><span class="line">String xmlPath = <span class="string">"com/springlearning/f_xml/b_setter/beans.xml"</span>;</span><br><span class="line"></span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(xmlPath);<span class="comment">//配置文件一加载，对象就实例化了</span></span><br><span class="line">Person person = (Person) applicationContext.getBean(<span class="string">"personId"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(person);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-5-3-P命令空间-了解即可"><a href="#5-5-3-P命令空间-了解即可" class="headerlink" title="5.5.3 P命令空间 [了解即可]"></a>5.5.3 P命令空间 [了解即可]</h4><ul><li><p>对“setter方法注入”进行简化，替换<code>&lt;property name=&quot;属性名&quot;&gt;</code>，而是在<code>&lt;bean p:属性名=&quot;普通值&quot; p:属性名-ref=&quot;引用值&quot;&gt;</code></p></li><li><p>p命名空间使用前提，必须添加命名空间</p><p><img src="http://q1o3t6lvp.bkt.clouddn.com/2019-12-01_21-56-14%E6%88%AA%E5%B1%8F.jpg" alt="没有找到！"></p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"personId"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.f_xml.c_p.Person"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">p:pname</span>=<span class="string">"于晓光"</span> <span class="attr">p:age</span>=<span class="string">"28"</span> <span class="attr">p:homeAddr-ref</span>=<span class="string">"homeAddrId"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:companyAddr-ref</span>=<span class="string">"companyAddrId"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"homeAddrId"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.f_xml.c_p.Address"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:addr</span>=<span class="string">"DG"</span> <span class="attr">p:tel</span>=<span class="string">"东莞"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"companyAddrId"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.f_xml.c_p.Address"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:addr</span>=<span class="string">"DG"</span> <span class="attr">p:tel</span>=<span class="string">"岛国"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-5-4-SpEL-了解即可"><a href="#5-5-4-SpEL-了解即可" class="headerlink" title="5.5.4 SpEL[了解即可]"></a>5.5.4 SpEL[了解即可]</h4><ul><li>对<code>&lt;property&gt;</code>进行统一编程，所有的内容都使用value</li></ul><p><code>&lt;property name=&quot;&quot; value=&quot;#{表达式}&quot;&gt;</code></p><p>​    #{123}、#{‘jack’} ： 数字、字符串是单引号</p><p>​    #{beanId}   ：另一个bean引用</p><p>​    #{beanId.propName}  ：操作数据</p><p>​    #{beanId.toString()}   ：执行方法</p><p>​    #{T(类).字段|方法}   ：静态方法或字段</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">   常规赋值：&lt;property name="cname" value="#&#123;'Jack'&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">&lt;property name="cname" value="#&#123;customerId.cname.toUpperCase()&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">通过另一个bean，获得属性，调用的方法</span></span><br><span class="line"><span class="comment">&lt;property name="cname" value="#&#123;customerId.cname?.toUpperCase()&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">?.  如果对象不为null，将调用方法</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerId"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.f_xml.d_spel.Customer"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cname"</span> <span class="attr">value</span>=<span class="string">"#&#123;customerId.cname?.toUpperCase()&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pi"</span> <span class="attr">value</span>=<span class="string">"#&#123;T(java.lang.Math).PI&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>阅读</p><p><a href="https://www.cnblogs.com/sharpest/p/10885210.html" target="_blank" rel="noopener">https://www.cnblogs.com/sharpest/p/10885210.html</a></p></li></ul><h4 id="5-5-5-集合注入"><a href="#5-5-5-集合注入" class="headerlink" title="5.5.5 集合注入"></a>5.5.5 集合注入</h4><h5 id="5-5-5-1-目标类"><a href="#5-5-5-1-目标类" class="headerlink" title="5.5.5.1 目标类"></a>5.5.5.1 目标类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String[] arrayData;</span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; listData;</span><br><span class="line"><span class="keyword">private</span> Set&lt;String&gt; setData;</span><br><span class="line"><span class="keyword">private</span> Map&lt;String,String&gt; mapData;</span><br><span class="line"><span class="keyword">private</span> Properties propsData;</span><br><span class="line"><span class="keyword">public</span> String[] getArrayData() &#123;</span><br><span class="line"><span class="keyword">return</span> arrayData;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArrayData</span><span class="params">(String[] arrayData)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.arrayData = arrayData;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getListData</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> listData;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setListData</span><span class="params">(List&lt;String&gt; listData)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.listData = listData;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getSetData</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> setData;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSetData</span><span class="params">(Set&lt;String&gt; setData)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.setData = setData;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getMapData</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mapData;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMapData</span><span class="params">(Map&lt;String, String&gt; mapData)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.mapData = mapData;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Properties <span class="title">getPropsData</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> propsData;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPropsData</span><span class="params">(Properties propsData)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.propsData = propsData;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"CollData [\narrayData="</span> + Arrays.toString(arrayData) + <span class="string">", \nlistData="</span> + listData + <span class="string">", \nsetData="</span> + setData</span><br><span class="line">+ <span class="string">", \nmapData="</span> + mapData + <span class="string">", \npropsData="</span> + propsData + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-5-5-2-Spring配置"><a href="#5-5-5-2-Spring配置" class="headerlink" title="5.5.5.2 Spring配置"></a>5.5.5.2 Spring配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">集合的注入都是给&lt;property&gt;添加子标签</span></span><br><span class="line"><span class="comment">数组：&lt;array&gt;</span></span><br><span class="line"><span class="comment">List：&lt;list&gt;</span></span><br><span class="line"><span class="comment">Set：&lt;set&gt;</span></span><br><span class="line"><span class="comment">Map：&lt;map&gt; ，map存放k/v 键值对，使用&lt;entry&gt;描述</span></span><br><span class="line"><span class="comment">Properties：&lt;props&gt;  &lt;prop key=""&gt;&lt;/prop&gt;  【配的最多】</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">普通数据：&lt;value&gt;</span></span><br><span class="line"><span class="comment">引用数据：&lt;ref&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"collDataId"</span> <span class="attr">class</span>=<span class="string">"com.springlearning.f_xml.e_collection.CollData"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"arrayData"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>DS<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>DZD<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>屌丝<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>屌中屌<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"listData"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>于嵩楠<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>曾卫<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>杨煜<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>曾小贤<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"setData"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>停封<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>薄纸<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>关系<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapData"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"jack"</span> <span class="attr">value</span>=<span class="string">"杰克"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>rose<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>肉丝<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"propsData"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"高富帅"</span>&gt;</span>嫐<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"白富美"</span>&gt;</span>嬲<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"男屌丝"</span>&gt;</span>挊<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5-5-5-3-测试"><a href="#5-5-5-3-测试" class="headerlink" title="5.5.5.3 测试"></a>5.5.5.3 测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="comment">//spring工厂</span></span><br><span class="line">         String xmlPath = <span class="string">"com/springlearning/f_xml/e_collection/beans.xml"</span>;</span><br><span class="line">         ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(xmlPath);</span><br><span class="line">         CollData collData = applicationContext.getBean(<span class="string">"collDataId"</span>,CollData<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">         </span><br><span class="line">         System.out.println(collData);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、装配Bean-基于注解"><a href="#六、装配Bean-基于注解" class="headerlink" title="六、装配Bean 基于注解"></a>六、装配Bean 基于注解</h2><ul><li><p><strong>什么是注解？</strong>        <span style="color:red">注解就是一个类，使用@注解名称</span></p></li><li><p><strong>开发中：使用注解 取代 xml配置文件。</strong></p></li></ul><ol><li><h6 id="Component取代-lt-bean-class-quot-quot-gt"><a href="#Component取代-lt-bean-class-quot-quot-gt" class="headerlink" title="@Component取代&lt;bean class=&quot;&quot;&gt;"></a>@Component取代<code>&lt;bean class=&quot;&quot;&gt;</code></h6></li></ol><p>​    @Component(“id”) 取代 <code>&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;</code></p><ol start="2"><li><h6 id="web开发，提供3个-Component注解衍生注解（功能一样）取代-lt-bean-class-quot-quot-gt"><a href="#web开发，提供3个-Component注解衍生注解（功能一样）取代-lt-bean-class-quot-quot-gt" class="headerlink" title="web开发，提供3个@Component注解衍生注解（功能一样）取代&lt;bean class=&quot;&quot;&gt;"></a>web开发，提供3个@Component注解衍生注解（功能一样）取代<code>&lt;bean class=&quot;&quot;&gt;</code></h6></li></ol><p>​    @Repository ：dao层</p><p>​    @Service：service层</p><p>​    @Controller：web层</p><ol start="3"><li><h6 id="依赖注入，给私有字段设置，也可以给setter方法设置"><a href="#依赖注入，给私有字段设置，也可以给setter方法设置" class="headerlink" title="依赖注入，给私有字段设置，也可以给setter方法设置"></a>依赖注入，给私有字段设置，也可以给setter方法设置</h6></li></ol><p>​    普通值：@Value(“”)</p><p>​    引用值：</p><p>​        方式1：按照【类型】注入</p><p>​            @Autowired</p><p>​        方式2：按照【名称】注入1</p><p>​            @Autowired</p><p>​            @Qualifier(“名称”)</p><p>​        方式3：按照【名称】注入2</p><p>​            @Resource(“名称”)</p><ol start="4"><li><h6 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h6></li></ol><p>​    初始化：@PostConstruct</p><p>​    销毁：@PreDestroy</p><ol start="5"><li><h6 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h6></li></ol><p>​    @Scope(“prototype”) 多例</p><ul><li>注解使用前提，添加命名空间，让spring扫描含有注解类</li></ul><p><img src="http://q1o3t6lvp.bkt.clouddn.com/%E6%B3%A8%E8%A7%A3%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4.png" alt="没有找到"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">                       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                       http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">                       http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!--   用注解取代之前的方法</span></span><br><span class="line"><span class="comment">  &lt;bean id="userServiceId" class="com.springlearning.g_annotation.a_ioc.UserServiceImpl"&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 组件扫描，扫描含有注解的类 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.springlearning.g_annotation.b_web"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><h3 id="7-1-编写流程（基于xml）"><a href="#7-1-编写流程（基于xml）" class="headerlink" title="7.1 编写流程（基于xml）"></a>7.1 编写流程（基于xml）</h3><ol><li><p>导入jar包：4+1 –&gt; beans/core/context/expression | commons-logging  </p></li><li><p>编写目标类：dao和service  </p></li><li><p>spring配置文件</p></li></ol><p>IoC：<code>&lt;bean id=&quot;&quot; class=&quot;&quot; &gt;</code></p><p>DI：<code>&lt;bean&gt; &lt;property name=&quot;&quot; value=&quot;&quot; | ref=&quot;&quot;&gt;</code></p><p><strong>实例化方式：</strong></p><ol><li><p>默认构造</p></li><li><p>静态工厂：<code>&lt;bean id=&quot;&quot; class=&quot;工厂类&quot; factory-method=&quot;静态方法&quot;&gt;</code></p></li><li><p>实例工厂：<code>&lt;bean id=&quot;工厂id&quot; class=&quot;工厂类&quot;&gt; &lt;bean id=&quot;&quot; factory-bean=&quot;工厂id&quot; factory-method=&quot;方法&quot;&gt;</code></p></li></ol><p><strong>作用域：</strong><code>&lt;bean id=&quot;&quot; class=&quot;&quot; scope=&quot;singleton | prototype&quot;&gt;</code></p><p><strong>生命周期：</strong><code>&lt;bean id=&quot;&quot; class=&quot;&quot; init-method=&quot;&quot; destroy-method=&quot;&quot;&gt;</code></p><p> <strong>后处理bean</strong> BeanPostProcessor接口，<code>&lt;bean class=&quot;注册&quot;&gt;</code> ，对容器中所有的bean都生效</p><p><strong>属性注入</strong></p><p> 构造方法注入：<code>&lt;bean&gt;&lt;constructor-arg index=&quot;&quot; type=&quot;&quot; &gt;</code></p><p> setter方法注入：<code>&lt;bean&gt;&lt;property&gt;</code></p><p> <strong>p命名空间：</strong>简化<code>&lt;property&gt;</code>  <code>&lt;bean p:属性名=&quot;普通值&quot; p:属性名-ref=&quot;引用值&quot;&gt; 注意声明命名空间</code></p><p> <strong>SpEL：</strong><code>&lt;property name=&quot;&quot; value=&quot;#{表达式}&quot;&gt;</code></p><p>   #{123} #{‘abc’}</p><p>   #{beanId.propName?.methodName()}</p><p>   #{T(类).静态方法|字段}</p><p> <strong>集合</strong></p><p>   数组<code>&lt;array&gt;</code></p><p>   List <code>&lt;list&gt;</code></p><p>   Set <code>&lt;set&gt;</code></p><p>   Map <code>&lt;map&gt;&lt;entry key=&quot;&quot; value=&quot;&quot;&gt;</code></p><p>   Properties <code>&lt;props&gt;&lt;prop key=&quot;&quot;&gt;....</code></p><ol start="4"><li>核心api  </li></ol><p>BeanFactory，延迟实例化bean，第一次调用getBean</p><p>​    ApplicationContext 一般常用，功能更强</p><p>​       ClassPathXmlApplicationContext 加载classpath xml文件</p><p>​       FileSystemXmlApplicationContext 加载指定盘符文件 ， ServletContext.getRealPath()</p><h3 id="7-2-后处理bean-对一个生效"><a href="#7-2-后处理bean-对一个生效" class="headerlink" title="7.2 后处理bean 对一个生效"></a>7.2 后处理bean 对一个生效</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"userServiceId"</span>.equals(beanName))&#123;</span><br><span class="line">System.out.println(<span class="string">"前方法 ： "</span> + beanName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-注解"><a href="#7-3-注解" class="headerlink" title="7.3 注解"></a>7.3 注解</h3><ol><li>扫描含有注解的类</li></ol><p>​    &lt;context:component-scan base-package=”….”&gt;</p><ol start="2"><li>常见的注解</li></ol><p>​    @Component 组件，任意bean</p><p>​    WEB</p><p>​       @Controller web层</p><p>​       @Service service层</p><p>​       @Repository dao层</p><p>​    注入 –&gt; 字段或setter方法</p><p>​       普通值：@Value</p><p>​       引用值：</p><p>​           类型：@Autowired</p><p>​           名称1：@Autowired @Qualifier(“名称”)</p><p>​           名称2：@Resource(“名称”)</p><p>​    作用域：@Scope(“prototype”) </p><p>​    生命周期：</p><p>​       初始化：@PostConstruct</p><p>​       销毁方法：@PreDestroy</p><h3 id="7-4-注解和xml混合使用"><a href="#7-4-注解和xml混合使用" class="headerlink" title="7.4 注解和xml混合使用"></a>7.4 注解和xml混合使用</h3><ol><li><p>将所有的bean都配置xml中</p><p><code>&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;</code></p></li><li><p>将所有的依赖都使用注解</p></li></ol><p>​    @Autowired</p><p>​    默认不生效。为了生效，需要在xml配置：<code>&lt;context:annotation-config&gt;</code></p><p>总结：</p><p><strong>注解1：</strong><code>&lt;context:component-scan base-package=&quot; &quot;&gt;</code></p><p><strong>注解2：</strong><code>&lt;context:annotation-config&gt;</code></p><ol><li><p>一般情况两个注解不一起使用。</p></li><li><p>“注解1”扫描含有注解（@Component 等）类，注入注解自动生效。</p></li></ol><p>“注解2”只在xml和注解（注入）混合使用时，使注入注解生效。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;一、Spring框架概述&quot;&gt;&lt;a href=&quot;#一、Spring框架概述&quot; class=&quot;headerlink&quot; title=&quot;一、Spring框架概述&quot;&gt;&lt;/a&gt;一、Spring框架概述&lt;/h2&gt;&lt;h3 id=&quot;1-1-什么是Spring&quot;&gt;&lt;a href=&quot;#1-1-什么是Spring&quot; class=&quot;headerlink&quot; title=&quot;1.1 什么是Spring&quot;&gt;&lt;/a&gt;1.1 什么是Spring&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Spring是一个开源框架，Spring是于2003 年兴起的一个轻量级的Java 开发框架，由Rod Johnson 在其著作Expert One-On-One J2EE Development and Design中阐述的部分理念和原型衍生而来。它是为了解决企业应用开发的复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许使用者选择使用哪一个组件，同时为 J2EE 应用程序开发提供集成的框架。Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。Spring的核心是控制反转（IoC）和面向切面（AOP）。简单来说，Spring是一个&lt;strong&gt;分层&lt;/strong&gt;的JavaSE/EE &lt;span style=&quot;color:red&quot;&gt;full-stack(一站式) &lt;/span&gt;&lt;strong&gt;轻量级&lt;/strong&gt;开源框架。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;轻量级&lt;/strong&gt;指的是与EJB对比，依赖资源少，销毁的资源少 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;分层&lt;/strong&gt;指的是一站式，每一个层都提供的解决方案&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;web层：struts，spring-MVC&lt;/li&gt;
&lt;li&gt;service层：spring&lt;/li&gt;
&lt;li&gt;dao层：hibernate，mybatis ， jdbcTemplate –&amp;gt; (spring-data了解)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="框架学习" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>随笔</title>
    <link href="http://yoursite.com/2019/11/24/%E9%9A%8F%E7%AC%94/"/>
    <id>http://yoursite.com/2019/11/24/%E9%9A%8F%E7%AC%94/</id>
    <published>2019-11-24T11:57:51.000Z</published>
    <updated>2020-05-11T02:57:39.354Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="file" scheme="http://yoursite.com/categories/file/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>图片测试</title>
    <link href="http://yoursite.com/2019/11/24/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2019/11/24/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/</id>
    <published>2019-11-24T07:54:50.000Z</published>
    <updated>2020-05-11T02:55:03.523Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/bridge.jpg" alt="没有找到图片"></p><p><img src="/2019/11/24/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/bridge.jpg" alt="找不到图片"></p><p><img src="/2019/11/24/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/%5Cbridge.jpg" alt="实在找不到"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/bridge.jpg&quot; alt=&quot;没有找到图片&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/11/24/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/bridge.jpg&quot; alt=&quot;找不到图片&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;i
      
    
    </summary>
    
    
      <category term="测试" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试" scheme="http://yoursite.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Typora使用教程</title>
    <link href="http://yoursite.com/2019/11/24/Typora%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/11/24/Typora%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2019-11-24T04:22:38.000Z</published>
    <updated>2020-05-11T13:07:05.750Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><blockquote><p>” <strong>Markdown</strong> 是一种<strong>轻量级</strong>标记语言，创始人是<strong>约翰·格鲁伯</strong>（John Gruber）。它允许人们 “使用易读易写的纯文本格式编写文档，然后转换成有效的 HTML 文档。” </p></blockquote></blockquote></blockquote> <a id="more"></a> <h2 id="1-基本操作"><a href="#1-基本操作" class="headerlink" title="1.基本操作"></a>1.基本操作</h2><h3 id="1-1内容目录"><a href="#1-1内容目录" class="headerlink" title="1.1内容目录"></a>1.1内容目录</h3><p>[toc]</p><h3 id="1-2标题"><a href="#1-2标题" class="headerlink" title="1.2标题"></a>1.2标题</h3><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="#               一级标题"></a>#               一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="##          二级标题"></a>##          二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="###      三级标题"></a>###      三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="####     四级标题"></a>####     四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="#####   五级标题"></a>#####   五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="######  六级标题"></a>######  六级标题</h6><h2 id="1-3引用"><a href="#1-3引用" class="headerlink" title="1.3引用"></a>1.3引用</h2><blockquote><p>引用内容一</p></blockquote><blockquote><p>引用内容二</p></blockquote><blockquote><blockquote><p>引用内容三</p></blockquote></blockquote><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h2><h3 id="2-1单行代码"><a href="#2-1单行代码" class="headerlink" title="2.1单行代码"></a>2.1单行代码</h3><p><code>String str1=&quot;你好啊！&quot;;</code></p><h3 id="2-2多行代码"><a href="#2-2多行代码" class="headerlink" title="2.2多行代码"></a>2.2多行代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;&#125;</span><br><span class="line">    System.out.println(<span class="string">"你好！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <!-- more --> <h2 id="3-列表"><a href="#3-列表" class="headerlink" title="3.列表"></a>3.列表</h2><h3 id="3-1无序列表"><a href="#3-1无序列表" class="headerlink" title="3.1无序列表"></a>3.1无序列表</h3><ul><li>无序列表1</li></ul><ul><li>无序列表2</li></ul><ul><li>无序列表3</li></ul><h3 id="3-2多行无序列表"><a href="#3-2多行无序列表" class="headerlink" title="3.2多行无序列表"></a>3.2多行无序列表</h3><ul><li><p>多行无序列表1</p></li><li><ul><li><p>多行无序列表2</p></li><li><ul><li>多行无序列表3</li></ul></li></ul></li></ul><h3 id="3-3有序列表"><a href="#3-3有序列表" class="headerlink" title="3.3有序列表"></a>3.3有序列表</h3><p>1.有序列表1</p><p>2.有序列表2</p><p>3.有序列表3</p><h3 id="3-4多行有序列表"><a href="#3-4多行有序列表" class="headerlink" title="3.4多行有序列表"></a>3.4多行有序列表</h3><p>1.多行有序列表1</p><p>2.多行有序列表2</p><p>​    1.多行有序列表2-1</p><p>​    2.多行有序列表2-2</p><p>3.多行有序列表3</p><p>​    1.多行有序列表3-1</p><p>​    2.多行有序列表3-2</p><h3 id="3-5任务列表"><a href="#3-5任务列表" class="headerlink" title="3.5任务列表"></a>3.5任务列表</h3><p> -[ ] 抽烟</p><p> -[x] 喝酒</p><p> -[ ] 烫头</p><h3 id="3-6表格"><a href="#3-6表格" class="headerlink" title="3.6表格"></a>3.6表格</h3><table><thead><tr><th>姓名</th><th>性别</th><th>年龄</th><th>手机号</th></tr></thead><tbody><tr><td>张三</td><td>男</td><td>22</td><td>134525456789</td></tr><tr><td>李四</td><td>女</td><td>23</td><td>188528789456</td></tr><tr><td>王五</td><td>男</td><td>25</td><td>137321561234</td></tr></tbody></table> <!-- more --> <h2 id="4-连接"><a href="#4-连接" class="headerlink" title="4.连接"></a>4.连接</h2><h3 id="4-1图片"><a href="#4-1图片" class="headerlink" title="4.1图片"></a>4.1图片</h3><p>*本地图片（加载很慢，可选择七牛云）</p><p><img src="http://q1o3t6lvp.bkt.clouddn.com/bridge.jpg" alt="bridge"></p><p>*网络图片</p><p><img src="http://img.netbian.com/file/2019/1118/7484348e1e863797925e9869687131b3.jpg" alt></p><h3 id="4-2超链接"><a href="#4-2超链接" class="headerlink" title="4.2超链接"></a>4.2超链接</h3><p>*行内式链接</p><p>[百度一下][<a href="https://www.baidu.com/]" target="_blank" rel="noopener">https://www.baidu.com/]</a></p><p>*参考式链接</p><p>*自动链接</p><p><a href="https://www.github.com/nedlee329" target="_blank" rel="noopener">https://www.github.com/nedlee329</a></p><h2 id="5-其他"><a href="#5-其他" class="headerlink" title="5.其他"></a>5.其他</h2><h3 id="5-1斜体"><a href="#5-1斜体" class="headerlink" title="5.1斜体"></a>5.1斜体</h3><p><em>斜体1</em></p><p><em>斜体2</em></p><h3 id="5-2加粗"><a href="#5-2加粗" class="headerlink" title="5.2加粗"></a>5.2加粗</h3><p><strong>加粗1</strong></p><p><strong>加粗2</strong></p><h3 id="5-3-下划线"><a href="#5-3-下划线" class="headerlink" title="5.3 下划线"></a>5.3 下划线</h3><p><u>下划线</u></p><h3 id="5-4删除线"><a href="#5-4删除线" class="headerlink" title="5.4删除线"></a>5.4删除线</h3><p><del>删除线</del></p><h3 id="5-5分割线"><a href="#5-5分割线" class="headerlink" title="5.5分割线"></a>5.5分割线</h3><hr><hr><hr><h3 id="5-6注脚"><a href="#5-6注脚" class="headerlink" title="5.6注脚"></a>5.6注脚</h3><p>Typora[^1]</p><h3 id="5-7上下标"><a href="#5-7上下标" class="headerlink" title="5.7上下标"></a>5.7上下标</h3><p>3^2=9$$</p><p>$ 3^{(3-1)}=9 $</p><p>$ H_2SO_4 $</p><p>$ H_{2SO_4} $</p> <!-- more --> <h3 id="5-8符号的输入-输入之前加反斜杠"><a href="#5-8符号的输入-输入之前加反斜杠" class="headerlink" title="5.8符号的输入(输入之前加反斜杠)"></a>5.8符号的输入(输入之前加反斜杠)</h3><p>\     反斜线</p><p>&#39;     反引号</p><p>*    星号</p><p>_    底线</p><p>{}    花括号</p><p>[ ]    方括号</p><p>()    括弧</p><p>#    井号</p><p>+    加号</p><p>-    减号</p><p>.    英文点</p><p>!    感叹号</p><h3 id="5-9Typora快捷键"><a href="#5-9Typora快捷键" class="headerlink" title="5.9Typora快捷键"></a>5.9Typora快捷键</h3><ul><li><p>标题：ctrl+数字</p></li><li><p>表格：ctrl+t</p></li><li><p>生成目录：[TOC]按回车</p></li><li><p>选中一整行：ctrl+l</p></li><li><p>选中单词：ctrl+d</p></li><li><p>选中相同格式的文字：ctrl+e</p></li><li><p>搜索：ctrl+f</p></li><li><p>替换：ctrl+h</p></li><li><p>引用：输入&gt;之后输入空格</p></li><li><p>代码块：ctrl+alt+f</p></li><li><p>加粗：ctrl+b</p></li><li><p>倾斜：ctrl+i</p></li><li><p>下划线：ctrl+u</p></li><li><p>删除线：alt+shift+5</p></li><li><p>插入图片：直接拖动到指定位置即可或者ctrl+shift+i</p></li><li><p>插入链接：ctrl+k</p><h3 id="5-10-控制文字颜色"><a href="#5-10-控制文字颜色" class="headerlink" title="5.10 控制文字颜色"></a>5.10 控制文字颜色</h3><p>在markdown中采用如下方式能够控制文字的颜色：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">浅红色文字：<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#dd0000"</span>&gt;</span>浅红色文字：<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span> </span><br><span class="line">深红色文字：<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#660000"</span>&gt;</span>深红色文字<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span> </span><br><span class="line">浅绿色文字：<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#00dd00"</span>&gt;</span>浅绿色文字<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span> </span><br><span class="line">深绿色文字：<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#006600"</span>&gt;</span>深绿色文字<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span> </span><br><span class="line">浅蓝色文字：<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#0000dd"</span>&gt;</span>浅蓝色文字<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span> </span><br><span class="line">深蓝色文字：<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#000066"</span>&gt;</span>深蓝色文字<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span> </span><br><span class="line">浅黄色文字：<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#dddd00"</span>&gt;</span>浅黄色文字<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span> </span><br><span class="line">深黄色文字：<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#666600"</span>&gt;</span>深黄色文字<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span> </span><br><span class="line">浅青色文字：<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#00dddd"</span>&gt;</span>浅青色文字<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span> </span><br><span class="line">深青色文字：<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#006666"</span>&gt;</span>深青色文字<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span> </span><br><span class="line">浅紫色文字：<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#dd00dd"</span>&gt;</span>浅紫色文字<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span> </span><br><span class="line">深紫色文字：<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#660066"</span>&gt;</span>深紫色文字<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p>浅红色文字：<font color="#dd0000">浅红色文字：</font><br><br>深红色文字：<font color="#660000">深红色文字</font><br><br>浅绿色文字：<font color="#00dd00">浅绿色文字</font><br><br>深绿色文字：<font color="#006600">深绿色文字</font><br><br>浅蓝色文字：<font color="#0000dd">浅蓝色文字</font><br><br>深蓝色文字：<font color="#000066">深蓝色文字</font><br><br>浅黄色文字：<font color="#dddd00">浅黄色文字</font><br><br>深黄色文字：<font color="#666600">深黄色文字</font><br><br>浅青色文字：<font color="#00dddd">浅青色文字</font><br><br>深青色文字：<font color="#006666">深青色文字</font><br><br>浅紫色文字：<font color="#dd00dd">浅紫色文字</font><br><br>深紫色文字：<font color="#660066">深紫色文字</font><br> </p></li></ul><h2 id="6-Typora下载地址"><a href="#6-Typora下载地址" class="headerlink" title="6.Typora下载地址"></a>6.Typora下载地址</h2><p><a href="https://www.typora.io/" target="_blank" rel="noopener">https://www.typora.io/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;” &lt;strong&gt;Markdown&lt;/strong&gt; 是一种&lt;strong&gt;轻量级&lt;/strong&gt;标记语言，创始人是&lt;strong&gt;约翰·格鲁伯&lt;/strong&gt;（John Gruber）。它允许人们 “使用易读易写的纯文本格式编写文档，然后转换成有效的 HTML 文档。” &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="http://yoursite.com/2019/11/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <id>http://yoursite.com/2019/11/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</id>
    <published>2019-11-22T07:58:25.000Z</published>
    <updated>2019-11-22T08:09:08.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>内容</p><hr><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>内容</p><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://www.nedlee.com" target="_blank" rel="noopener">www.nedlee.com</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h2&gt;&lt;p&gt;内容&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;第二章&quot;&gt;&lt;a href=&quot;#第二章&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/11/22/hello-world/"/>
    <id>http://yoursite.com/2019/11/22/hello-world/</id>
    <published>2019-11-22T07:45:32.094Z</published>
    <updated>2019-11-22T07:45:32.094Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
